<?xml version="1.0"?>
  <database name="FUNCTION M_MOVEMENT_POST">
    <function name="M_MOVEMENT_POST" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_movement_id" type="VARCHAR" mode="in">
        <default><![CDATA[NULL]]></default>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2018 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: M_Movement_Post.sql,v 1.3 2003/09/05 04:58:06 jjanke Exp $
  ***
  * Title: Post Movements
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_Result NUMBER:=1;
  --Added by PSarobe 13062007
  v_line NUMBER;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    cur_refInvByLocatorTo RECORD;
    -- Parameter Variables
    v_IsProcessing CHAR(1) ;
    v_IsProcessed VARCHAR2(60) ;
    v_MoveDate DATE;
    v_Client_ID VARCHAR2(32) ;
    v_Org_ID VARCHAR2(32);
    v_p_User VARCHAR2(32);
    v_Count NUMBER:=0;
    v_is_included NUMBER:=0;
    v_available_period NUMBER:=0;
    v_is_ready AD_Org.IsReady%TYPE;
    v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
    v_isacctle AD_OrgType.IsAcctLegalEntity%TYPE;
    v_org_bule_id AD_Org.AD_Org_ID%TYPE;
    END_PROCESS BOOLEAN:=false;
    v_productname m_product.name%TYPE;
    v_overIssueFrom m_inventorystatus.overissue%TYPE;
    v_overIssueTo m_inventorystatus.overissue%TYPE;
    v_refInvValue M_REFINVENTORY.VALUE%TYPE;
    v_locatorValue M_LOCATOR.VALUE%TYPE;
  BEGIN
  IF (pinstance_id IS NOT NULL) THEN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  END IF;
  BEGIN --BODY
	  IF (pinstance_id IS NOT NULL) THEN
	    -- Get Parameters
	    v_ResultStr:='ReadingParameters';
	    FOR Cur_Parameter IN
	      (SELECT i.Record_ID,
	        i.AD_User_ID,
	        p.ParameterName,
	        p.P_String,
	        p.P_Number,
	        p.P_Date
	      FROM AD_PInstance i
	      LEFT JOIN AD_PInstance_Para p
	        ON i.AD_PInstance_ID=p.AD_PInstance_ID
	      WHERE i.AD_PInstance_ID=PInstance_ID
	      ORDER BY p.SeqNo
	      )
	    LOOP
	      v_Record_ID:=Cur_Parameter.Record_ID;
	      v_p_User:=Cur_Parameter.AD_User_ID;
	    END LOOP; -- Get Parameter
    ELSE
	    v_Record_ID:=p_movement_id;
      SELECT createdby INTO v_p_User FROM m_movement WHERE m_movement_id = v_Record_ID ;
	  END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- Reading Movement
    SELECT MovementDate,
      Processing,
      Processed,
      AD_Client_ID,
      AD_Org_ID
    INTO v_MoveDate,
      v_IsProcessing,
      v_IsProcessed,
      v_Client_ID,
      v_Org_ID
    FROM M_Movement
    WHERE M_Movement_ID=v_Record_ID  FOR UPDATE;

	  SELECT COUNT(*) INTO v_Count
    FROM M_MovementLine
    WHERE M_Movement_ID = v_Record_ID;

    IF v_Count = 0 THEN
      RAISE_APPLICATION_ERROR(-20000, '@NoLinesForMovement@');
    END IF;

    IF(v_IsProcessing='Y') THEN
      RAISE_APPLICATION_ERROR(-20000, '@OtherProcessActive@') ;
    END IF;
    IF(NOT END_PROCESS) THEN
      IF(v_IsProcessed='Y') THEN
        RAISE_APPLICATION_ERROR(-20000, '@AlreadyPosted@') ;
      END IF;
    END IF;--END_PROCESS
    IF(NOT END_PROCESS) THEN
      v_ResultStr:='CheckingRestrictions';
      SELECT COUNT(*), MAX(M.line)
      INTO v_Count, v_line
      FROM M_MovementLine M,
        M_Product P
      WHERE M.M_PRODUCT_ID=P.M_PRODUCT_ID
        AND P.M_ATTRIBUTESET_ID IS NOT NULL
        AND (P.ATTRSETVALUETYPE IS NULL OR P.ATTRSETVALUETYPE <> 'F')
        AND (SELECT ISONEATTRSETVALREQUIRED FROM M_ATTRIBUTESET WHERE M_ATTRIBUTESET_ID = P.M_ATTRIBUTESET_ID) = 'Y'
        AND COALESCE(M.M_ATTRIBUTESETINSTANCE_ID, '0') = '0'
        AND M.M_Movement_ID=v_Record_ID;
      IF v_Count<>0 THEN
       RAISE_APPLICATION_ERROR(-20000, '@Inline@'||' '||v_line||' '||'@productWithoutAttributeSet@') ;
      END IF;
      SELECT count(*), max(p.name)
        INTO v_count, v_productname
      FROM m_movementline ml JOIN m_product p ON ml.m_product_id = p.m_product_id
      WHERE ml.m_movement_id = v_record_id
        AND COALESCE(p.isgeneric, 'N') = 'Y';
      IF (v_count > 0) THEN
        RAISE_APPLICATION_ERROR(-20000, '@CannotUseGenericProduct@ ' || v_productName);
      END IF;
    END IF;--END_PROCESS
    IF(NOT END_PROCESS) THEN
      -- Start Processing ------------------------------------------------------
      -- Check the header belongs to a organization where transactions are posible and ready to use
      SELECT AD_Org.IsReady, Ad_OrgType.IsTransactionsAllowed
      INTO v_is_ready, v_is_tr_allow
      FROM M_MOVEMENT, AD_Org, AD_OrgType
      WHERE AD_Org.AD_Org_ID=M_MOVEMENT.AD_Org_ID
      AND AD_Org.AD_OrgType_ID=AD_OrgType.AD_OrgType_ID
      AND M_MOVEMENT.M_MOVEMENT_ID=v_Record_ID;
      IF (v_is_ready='N') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotReady@');
      END IF;
      IF (v_is_tr_allow='N') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OrgHeaderNotTransAllowed@');
      END IF;
      
      SELECT AD_ORG_CHK_DOCUMENTS('M_MOVEMENT', 'M_MOVEMENTLINE', v_Record_ID, 'M_MOVEMENT_ID', 'M_MOVEMENT_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
        RAISE_APPLICATION_ERROR(-20000, '@LinesAndHeaderDifferentLEorBU@');
      END IF;
      
      -- Check the period control is opened (only if it is legal entity with accounting)
      -- Gets the BU or LE of the document
      SELECT AD_GET_DOC_LE_BU('M_MOVEMENT', v_Record_ID, 'M_MOVEMENT_ID', 'LE')
      INTO v_org_bule_id
      FROM DUAL;
      
      SELECT AD_OrgType.IsAcctLegalEntity
      INTO v_isacctle
      FROM AD_OrgType, AD_Org
      WHERE AD_Org.AD_OrgType_ID = AD_OrgType.AD_OrgType_ID
      AND AD_Org.AD_Org_ID=v_org_bule_id;
      
      IF (v_isacctle='Y') THEN
        SELECT C_CHK_OPEN_PERIOD(v_Org_ID, v_MoveDate, 'MMM', NULL) 
        INTO v_available_period
        FROM DUAL;
        
        IF (v_available_period<>1) THEN
          RAISE_APPLICATION_ERROR(-20000, '@PeriodNotAvailable@');
        END IF;
      END IF;

      v_ResultStr:='LockingMovement';
      UPDATE M_Movement  SET Processing='Y',Updated=now(),UpdatedBy=v_p_User  WHERE M_Movement_ID=v_Record_ID;
      -- Commented by cromero 19102006 COMMIT;
      /**
      * Accounting first step
      */
      DECLARE
        Cur_MoveLine RECORD;
        cur_res_stock RECORD;
        v_res_stock_id VARCHAR2(32);
        v_reservedqty NUMBER;
        v_qtytorelease NUMBER;
        v_res_result NUMBER;
        v_res_msg NVARCHAR2(2000);
        v_storage_detail_id VARCHAR2(32);
      BEGIN --FOR COMMIT
        FOR Cur_MoveLine IN
          (SELECT *  FROM M_MovementLine  WHERE M_Movement_ID=v_Record_ID  ORDER BY Line)
        LOOP
          v_ResultStr:='Transaction for line' || Cur_MoveLine.Line;
          
          SELECT overissue
          INTO v_overIssueFrom
          FROM M_InventoryStatus
          WHERE M_InventoryStatus_ID = (SELECT M_InventoryStatus_ID
                                        FROM M_Locator
                                        WHERE M_Locator_ID = Cur_MoveLine.M_Locator_ID);                               
          SELECT overissue
          INTO v_overIssueTo
          FROM M_InventoryStatus
          WHERE M_InventoryStatus_ID = (SELECT M_InventoryStatus_ID
                                        FROM M_Locator
                                        WHERE M_Locator_ID = Cur_MoveLine.M_LocatorTo_ID);

          IF (Cur_MoveLine.MovementQty <= 0 AND (v_overIssueFrom = 'N' OR v_overIssueTo = 'N')) THEN
            RAISE_APPLICATION_ERROR(-20000,'@GoodsMovementsWithNegativeQty@' || ' @Inline@ ' || Cur_MoveLine.line) ;
          END IF;
          
          IF (cur_moveline.m_reservation_id IS NOT NULL) THEN
            SELECT COALESCE(SUM(quantity - COALESCE(releasedqty,0)), 0) INTO v_reservedqty
            FROM m_reservation_stock
            WHERE m_reservation_id = cur_moveline.m_reservation_id
              AND m_locator_id = cur_moveline.m_locator_id
              AND COALESCE(m_attributesetinstance_id, '0') = COALESCE(cur_moveline.m_attributesetinstance_id, '0');
            IF (v_reservedqty < cur_moveline.movementqty) THEN
              -- There is not enough stock reserved in given storage bin and attributes
              -- Try to reallocate no allocated reserved stock.
              -- An error means that there is not available stock to assign to the given reservation because:
              -- 1) there is not enough on hand stock
              -- 2) there are other reservations using that stock and cannot be reallocated to use a different stock
              -- 3) the given reservation has some allocated stock with different storage bin or attributes
              M_RESERVATION_REALLOCATE(cur_moveline.m_reservation_id, cur_moveline.m_locator_id, cur_moveline.m_attributesetinstance_id, cur_moveline.movementqty, v_p_User, v_res_result, v_res_msg);
              IF (v_res_result IN (0, 2)) THEN
                RAISE_APPLICATION_ERROR(-20000, v_res_msg);
              END IF;
            END IF;
            -- If there is enough stock reserved release the stock and reserve it in the destination storage bin
            SELECT m_storage_detail_id INTO v_storage_detail_id
            FROM m_storage_detail
            WHERE m_product_id = cur_moveline.m_product_id
              AND m_locator_id = cur_moveline.m_locatorto_id
              AND m_attributesetinstance_id = COALESCE(cur_moveline.m_attributesetinstanceto_id, cur_moveline.m_attributesetinstance_id, '0')
              AND m_product_uom_id IS NULL;
            v_reservedqty := cur_moveline.movementqty;
            FOR cur_res_stock IN (
                SELECT m_reservation_stock_id, quantity - COALESCE(releasedqty,0) AS reservedqty, isallocated
                FROM m_reservation_stock
                WHERE m_reservation_id = cur_moveline.m_reservation_id
                  AND m_locator_id = cur_moveline.m_locator_id
                  AND COALESCE(m_attributesetinstance_id, '0') = COALESCE(cur_moveline.m_attributesetinstance_id, '0')
                ORDER BY CASE isallocated WHEN 'Y' THEN 0 ELSE 1 END
              ) LOOP
              v_qtytorelease := LEAST(v_reservedqty, cur_res_stock.reservedqty);

              UPDATE m_reservation_stock
                SET quantity = quantity - v_qtytorelease
              WHERE m_reservation_stock_id = cur_res_stock.m_reservation_stock_id;
              M_RESERVE_STOCK_MANUAL(cur_moveline.m_reservation_id, 'SD', v_storage_detail_id, v_qtytorelease, v_p_user, cur_res_stock.isallocated, v_res_stock_id);
              DBMS_OUTPUT.PUT_LINE('M_Reserve_Stock_Manual: ' || v_res_stock_id);

              v_reservedqty := v_reservedqty - v_qtytorelease;
              IF (v_reservedqty <= 0) THEN
                EXIT;
              END IF;
            END LOOP;

            DELETE FROM m_reservation_stock
            WHERE quantity = 0
              AND m_reservation_id = cur_moveline.m_reservation_id;
          END IF;

          -- FROM
          INSERT
          INTO M_Transaction
            (
              M_Transaction_ID, AD_Client_ID, AD_Org_ID, IsActive,
              Created, CreatedBy, Updated, UpdatedBy,
              MovementType, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID,
              MovementDate, MovementQty, M_MovementLine_ID, M_Product_UOM_ID,
              QuantityOrder, C_UOM_ID
            )
            VALUES
            (
              get_uuid(), Cur_MoveLine.AD_Client_ID, Cur_MoveLine.AD_Org_ID, 'Y',
              now(), v_p_User, now(), v_p_User,
              'M-', Cur_MoveLine.M_Locator_ID, Cur_MoveLine.M_Product_ID, COALESCE(Cur_MoveLine.M_AttributeSetInstance_ID, '0'),
              v_MoveDate, (Cur_MoveLine.MovementQty * -1), Cur_MoveLine.M_MovementLine_ID, Cur_MoveLine.M_Product_UOM_ID,
              (Cur_MoveLine.QuantityOrder * -1), Cur_MoveLine.C_UOM_ID
            )
            ;
          --Check Stock for Locator from which the Stock is going to be picked
          M_Check_Stock(Cur_MoveLine.M_Product_ID, v_Client_ID, v_Org_ID, v_Result, v_Message, Cur_MoveLine.M_Locator_ID) ;
          IF (v_Result = 0) THEN
            RAISE_APPLICATION_ERROR(-20000, v_Message||' '||'@line@'||' '||Cur_MoveLine.line) ;
          END IF;
          
          -- TO
          INSERT
          INTO M_Transaction
            (
              M_Transaction_ID, AD_Client_ID, AD_Org_ID, IsActive,
              Created, CreatedBy, Updated, UpdatedBy,
              MovementType, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID,
              MovementDate, MovementQty, M_MovementLine_ID, M_Product_UOM_ID,
              QuantityOrder, C_UOM_ID
            )
            VALUES
            (
              get_uuid(), Cur_MoveLine.AD_Client_ID, Cur_MoveLine.AD_Org_ID, 'Y',
              now(), v_p_User, now(), v_p_User,
              'M+', Cur_MoveLine.M_LocatorTo_ID, Cur_MoveLine.M_Product_ID, COALESCE(Cur_MoveLine.M_AttributeSetInstanceTo_ID, Cur_MoveLine.M_AttributeSetInstance_ID, '0'),
              v_MoveDate, Cur_MoveLine.MovementQty, Cur_MoveLine.M_MovementLine_ID, Cur_MoveLine.M_Product_UOM_ID,
              Cur_MoveLine.QuantityOrder, Cur_MoveLine.C_UOM_ID
            )
            ;
          --No need to check the Stock for the Locator to which the Stock is gointg to be moved
          --It has been validated before that the quantity to be moved is positive or that the locator to allows negative stock
          --If the Locator to has already negative stock before this transaction, the goods movement should not be stopped
        END LOOP;

        -- Referenced Inventory: check it is in just one locator
        FOR cur_refInvByLocatorTo IN (
          SELECT asi.M_REFINVENTORY_ID, ml.M_LocatorTo_ID
          FROM M_MOVEMENTLINE ml
          JOIN M_AttributeSetInstance asi on (asi.M_AttributeSetInstance_ID = COALESCE(ml.M_AttributeSetInstanceTo_ID, ml.M_AttributeSetInstance_ID, '0'))
          WHERE ml.M_MOVEMENT_ID = v_Record_ID
          AND asi.M_REFINVENTORY_ID IS NOT NULL
          GROUP BY asi.M_REFINVENTORY_ID, ml.M_LocatorTo_ID
        ) 
        LOOP
          BEGIN
            SELECT M_REFINVENTORY.VALUE, M_LOCATOR.VALUE
            INTO v_refInvValue, v_locatorValue
            FROM M_STORAGE_DETAIL
            JOIN M_LOCATOR on (M_STORAGE_DETAIL.M_LOCATOR_ID = M_LOCATOR.M_LOCATOR_ID)
            JOIN M_REFINVENTORY on (M_STORAGE_DETAIL.M_REFINVENTORY_ID = M_REFINVENTORY.M_REFINVENTORY_ID)
            WHERE M_STORAGE_DETAIL.M_REFINVENTORY_ID = cur_refInvByLocatorTo.M_REFINVENTORY_ID
            AND M_STORAGE_DETAIL.QTYONHAND > 0
            AND M_STORAGE_DETAIL.M_LOCATOR_ID <> cur_refInvByLocatorTo.M_LocatorTo_ID;
            IF (v_locatorValue IS NOT NULL) THEN
              RAISE_APPLICATION_ERROR(-20000, v_refInvValue || '@ReferencedInventoryInOtherBin@' || v_locatorValue) ;
            END IF;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            v_locatorValue:=null; -- Hack for Oracle to control exception
          END;
        END LOOP;    
      END; -- FOR COMMIT
    END IF;--END_PROCESS
    --M_Movement_Post - Finish_Process Extension Point
    --Extension point at the end of the M_Movement_Post. It has 4 available parameters Record_ID, User, Message and Result
    SELECT count(*) INTO v_count
    FROM DUAL
    where exists (select 1 from ad_ep_procedures where ad_extension_points_id = 'FB653E9B971343B3989222ECD5B73A72');
    IF (v_count=1) THEN
      DECLARE
        v_ep_instance VARCHAR2(32);
        v_extension_point_id VARCHAR2(32) := 'FB653E9B971343B3989222ECD5B73A72';
      BEGIN
        v_ep_instance := get_uuid();
        AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Record_ID',
          v_record_id, NULL, NULL, NULL, NULL, NULL, NULL);
        AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'User',
          v_p_User, NULL, NULL, NULL, NULL, NULL, NULL);
        AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Message',
          NULL, NULL, NULL, NULL, NULL, NULL, v_Message);
        AD_EP_INSTANCE_PARA_INSERT(v_ep_instance, v_extension_point_id, 'Result',
          NULL, NULL, v_Result, NULL, NULL, NULL, NULL);
        AD_EXTENSION_POINT_HANDLER(v_ep_instance, v_extension_point_id);
        SELECT p_number INTO v_Result
        FROM ad_ep_instance_para
        WHERE ad_ep_instance_id = v_ep_instance
          AND parametername LIKE 'Result';
        SELECT p_text INTO v_Message
        FROM ad_ep_instance_para
        WHERE ad_ep_instance_id = v_ep_instance
          AND parametername LIKE 'Message';

        DELETE FROM ad_ep_instance_para
        WHERE ad_ep_instance_id = v_ep_instance;
      END;
    END IF;

    IF(NOT END_PROCESS) THEN
      -- End Processing --------------------------------------------------------
      --<<END_PROCESSING>>
      v_ResultStr:='UnLockingMovement';
      UPDATE M_Movement  SET Processed='Y',Updated=now(),UpdatedBy=v_p_User  WHERE M_Movement_ID=v_Record_ID;
      -- Commented by cromero 19102006 COMMIT;
    END IF;--END_PROCESS
    --<<END_PROCESS>>
    v_ResultStr:='UnLockingMovement';
    UPDATE M_Movement  SET Processing='N'  WHERE M_Movement_ID=v_Record_ID;

    IF(pinstance_id IS NOT NULL) THEN
    --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(PInstance_ID, v_p_User, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('--<<M_MovementPost finished>>') ;
    END IF ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  UPDATE M_Movement  SET Processing='N',Updated=now(),UpdatedBy=v_p_User  WHERE M_Movement_ID=v_Record_ID;
  -- Commented by cromero 19102006 COMMIT;
  IF(pinstance_id IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF ;
  RETURN;
END M_MOVEMENT_POST
]]></body>
    </function>
  </database>
