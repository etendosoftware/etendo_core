pipeline {

    options {
        disableConcurrentBuilds()
        lock(resource: 'pipeline-lock-for-oracle')
    }

    environment {
        // gradle.properties variables
        CONTEXT_NAME        = 'etendo'
        BBDD_SID            = 'orclcdb'
        BBDD_PORT           = '5432'
        BBDD_SYSTEMUSER     = 'sys AS SYSDBA'
        BBDD_SYSTEMPASS     = 'rEUC0GRpxA'
        BBDD_USER           = 'C##TAD'
        BBDD_PASSWORD       = 'tad'
        NEXUS_USER          = credentials('nexus-admin-user')
        NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
        GITHUB_USER         = 'etendobot'
        GITHUB_TOKEN        = credentials('github-read-package-token')
        TZ                  = 'UTC'
        LANG                = 'en_US.UTF-8'
        EMAIL_ADDRESS       = credentials('email_builds')

        REPO_URL            = 'https://github.com/etendosoftware/etendo_core'
        REPO_NAME           = 'etendo_core'
        COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
        COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()

        SUCCESS             = "SUCCESS"
        FAILED              = "FAILED"
        UNSTABLE            = "UNSTABLE"

        // Stack
        JAVA_HOME           = "/usr/lib/jvm/java-11-openjdk-amd64"
        TOMCAT_URL          = "https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.86/bin/apache-tomcat-9.0.86.tar.gz"
        ORCL_VERSION        = "19c"

        CONTEXT_BUILD       = "Unit Tests with Oracle Database"
        ACCESS_TOKEN        = credentials('access_token_github')

        COMMIT_INPROGRESS_STATUS = "pending"
        COMMIT_SUCCESS_STATUS    = "success"
        COMMIT_FAILED_STATUS     = "failure"
    }

    agent {
        kubernetes {
            inheritFrom 'jenkins-node-unittests-orcl'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-unittests-orcl-0
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-node-unittests-orcl
spec:
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: ''
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.6
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 5000Mi
        requests:
          cpu: 3072m
          memory: 5000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock && rm
                /etc/apt/sources.list.d/pgdg.list || echo 0 && apt update && apt
                install -y curl
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext: {}
  """
        }
    }

    stages {
        stage('Build Environment') {
            steps {
                container('compiler') {
                    script {
                        try {
                            sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_INPROGRESS_STATUS "Starting Build Environment" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'
                            sh """
                            curl -O https://etendo-deploy.fra1.digitaloceanspaces.com/java/oracle-sqlcli-V1022102-01.tar.gz
                            tar xfz oracle-sqlcli-V1022102-01.tar.gz 2> /dev/null
                            chmod a+x sqlcl/bin/sql
                            """
                            sh """
                            echo "BEGIN
                              FOR r IN (select sid,serial# from v\\\$session where username='${BBDD_USER}')
                              LOOP
                                  EXECUTE IMMEDIATE 'alter system kill session ''' || r.sid  || ',' || r.serial# || ''' immediate';
                              END LOOP;
                            END;
                            /

                            DROP USER ${BBDD_USER} CASCADE;
                            commit;

                            exit; " > kill.sql
                            """
                            sh './sqlcl/bin/sql sys/${BBDD_SYSTEMPASS}@db19c-oracle-db.oracle:1521/ORCLCDB AS SYSDBA @kill.sql'

                            sh 'printenv'
                            echo 'Building Etendo Core'

                            echo "---------------- Stack Configuration ----------------"
                            def rootDir = pwd()
                            def stackConfig = load "${rootDir}/pipelines/unittests/utils/stackConfig.groovy"

                            sh "wget -O apache-tomcat.tar.gz $TOMCAT_URL"
                            sh "tar -xvf apache-tomcat.tar.gz -C $WORKSPACE"

                            env.TOMCAT_FOLDER = stackConfig.getTomcatFolder()
                            env.CATALINA_HOME = "${WORKSPACE}/${TOMCAT_FOLDER}"
                            env.CATALINA_BASE = "${WORKSPACE}/${TOMCAT_FOLDER}"

                            sh "git clone ${REPO_URL} ${REPO_NAME}"
                            dir('etendo_core') {
                                sh "git checkout ${GIT_COMMIT}"
                                sh """
                                echo "context.name=${CONTEXT_NAME}\n
                                bbdd.rdbms=ORACLE\n
                                bbdd.driver=oracle.jdbc.driver.OracleDriver\n
                                bbdd.url=jdbc:oracle:thin:@db19c-oracle-db.oracle:1521:orclcdb?oracle.net.disableOob=true\n
                                bbdd.sid=${BBDD_SID}\n
                                bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                                bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                                bbdd.user=${BBDD_USER}\n
                                bbdd.password=${BBDD_PASSWORD}\n
                                bbdd.sessionConfig=ALTER SESSION SET NLS_DATE_FORMAT='DD-MM-YYYY' NLS_NUMERIC_CHARACTERS='.,'\n

                                nexusUser=${NEXUS_USER}\n
                                nexusPassword=${NEXUS_PASSWORD}\n
                                githubUser=${GITHUB_USER}\n
                                githubToken=${GITHUB_TOKEN}\n
                                allow.root=true\n
                                org.gradle.jvmargs=-Dfile.encoding=UTF-8" > gradle.properties
                                """

                                sh """
                                mkdir -p build/lib/runtime
                                ./gradlew prepareConfig --info
                                ./gradlew setup --info
                                ./gradlew install --info
                                ./gradlew expandModules --info
                                ./gradlew smartbuild --info
                                """
                            }
                            sh "$WORKSPACE/$TOMCAT_FOLDER/bin/catalina.sh start"
                            sh "sleep 1m"
                            echo 'Build of Etendo Core Finished'
                            env.STATUSTEST = "1" //flag to indicate if any test failed
                            env.STATUSBUILD = "1"
                        } catch (Exception e) {
                            echo 'Build of Etendo Core FAILED'
                            echo "Exception occurred: " + e.toString()
                            currentBuild.result = FAILED
                            error('Build Etendo Core FAILED!')
                            env.STATUSBUILD = "0"
                        }
                    }
                }
            }
        }
//___________________________________________________________________________________________
// ------------------------------ WEB SERVICE TEST ------------------------------------------
        stage ('Web Service Test Suite'){
            when {
                expression {
                    env.STATUSBUILD == "1"
                }
            }
            steps {
                container('compiler') {
                    script {
                        dir('etendo_core') {
                            try {
                                sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_INPROGRESS_STATUS "Run test suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'
                                sh './gradlew test --tests org.openbravo.test.WebserviceTestSuite --info '
                                publishHTML([
                                    allowMissing: true,
                                    alwaysLinkToLastBuild: false,
                                    keepAll: true,
                                    reportDir: 'build/reports/tests/test',
                                    reportFiles: '*.html',
                                    reportName: 'WEB SERVICES TESTS REPORT',
                                    reportTitles: ''
                                ])
                            } catch (Exception e) {
                                echo '....TEST WEBSERVICE FAILED....'
                                echo 'Exception occurred: ' + e.toString()
                                currentBuild.result = UNSTABLE
                                unstable('Web Service Test Failed')
                                env.STATUSTEST = "0"
                                publishHTML([
                                    allowMissing: false,
                                    alwaysLinkToLastBuild: false,
                                    keepAll: true,
                                    reportDir: 'build/reports/tests/test',
                                    reportFiles: '*.html',
                                    reportName: 'WEBSERVICES TESTS REPORT',
                                    reportTitles: ''
                                ])
                            }
                        }
                    }
                    sh "$WORKSPACE/$TOMCAT_FOLDER/bin/catalina.sh stop"
                    sh './gradlew --stop'
                }
            }
        }
//___________________________________________________________________________________________
// ------------------------------- STANDALONE TEST ------------------------------------------
        stage ('Standalone Test Suite'){
            when {
                expression {
                    env.STATUSBUILD == "1"
                }
            }
            steps {
                container('compiler') {
                    script {
                        dir('etendo_core') {
                            try {
                                sh './gradlew test --tests org.openbravo.test.StandaloneTestSuite --info '
                                publishHTML([
                                    allowMissing: true,
                                    alwaysLinkToLastBuild: false,
                                    keepAll: true,
                                    reportDir: 'build/reports/tests/test',
                                    reportFiles: '*.html',
                                    reportName: 'STANDALONE TESTS REPORT',
                                    reportTitles: ''
                                ])
                            } catch (Exception e) {
                                echo '....TEST STANDALONE FAILED....'
                                echo 'Exception occurred: ' + e.toString()
                                currentBuild.result = UNSTABLE
                                unstable('Standalone Test Failed!')
                                env.STATUSTEST = "0"
                                publishHTML([
                                    allowMissing: false,
                                    alwaysLinkToLastBuild: false,
                                    keepAll: true,
                                    reportDir: 'build/reports/tests/test',
                                    reportFiles: '*.html',
                                    reportName: 'STANDALONE TESTS REPORT',
                                    reportTitles: ''
                                ])
                            }
                        }
                    }
                }
            }
        }
//___________________________________________________________________________________________
// ----------------------------------- SPOCK TEST -------------------------------------------
        stage ('Spock Test') {
            when {
                expression {
                    env.STATUSBUILD == "1"
                }
            }
            steps {
                container('compiler') {
                    script {
                        dir('etendo_core') {
                            try {
                                sh './gradlew test --tests "com.etendoerp.*" --info'
                                publishHTML([
                                    allowMissing: true,
                                    alwaysLinkToLastBuild: false,
                                    keepAll: true,
                                    reportDir: 'build/spock-reports/',
                                    reportFiles: '*.html',
                                    reportName: 'SPOCK TESTS REPORT',
                                    reportTitles: ''
                                ])
                            } catch (Exception e) {
                                echo '....TEST SPOCK FAILED....'
                                echo 'Exception occurred: ' + e.toString()
                                currentBuild.result = UNSTABLE
                                unstable('Spock Test failed!')
                                env.STATUSTEST = "0"
                                publishHTML([
                                    allowMissing: false,
                                    alwaysLinkToLastBuild: false,
                                    keepAll: true,
                                    reportDir: 'build/spock-reports/',
                                    reportFiles: '*.html',
                                    reportName: 'SPOCK TESTS REPORT',
                                    reportTitles: ''
                                ])
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            container('compiler') {
                script {
                    echo "---------------- Getting Commit & Stack Information ----------------"
                    def rootDir2 = pwd()
                    sh "git config --global --add safe.directory ${rootDir2}"
                    def infoCommit = load "${rootDir2}/pipelines/unittests/utils/infoCommit.groovy"
                    def stackConfig = load "${rootDir2}/pipelines/unittests/utils/stackConfig.groovy"
                    env.COMMIT_INFO = infoCommit.generateCommitInfo(env.REPO_URL)
                    env.STACK_INFO = stackConfig.generateStackMessage()

                    dir('etendo_core') {
                        sh "./gradlew --stop"
                    }
                    sh './sqlcl/bin/sql sys/${BBDD_SYSTEMPASS}@db19c-oracle-db.oracle:1521/ORCLCDB AS SYSDBA @kill.sql'
                }
            }
        }
        success {
            script {
                sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_SUCCESS_STATUS "Successful Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'
            }
        }
        fixed {
            mail to: EMAIL_ADDRESS,
            subject: "✅ FIXED - ${currentBuild.fullDisplayName}",
            mimeType: "text/html",
            body:  """
              <html>
                <head>
                    <style>
                        body { font-family: 'Arial', sans-serif; }
                        .header { font-size: 16px; font-weight: bold; color: #333; }
                    </style>
                </head>
                <body>
                  <p><em>${new Date()}</em></p>
                  <p>__________________________________________________________</p>

                  <h2 class="header">✅ ERRORS FIXED ✅</h2>

                  ${env.COMMIT_INFO}

                  ${env.STACK_INFO}

                  <p>The problems found in the previous run/s have been fixed! 💪<br>Check out the output in the following link: ${env.BUILD_URL}</p>

                  <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
                  <p>__________________________________________________________</p>
                </body>
              </html>
            """
        }
        unstable {
            script {
                sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_FAILED_STATUS "Failed Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'
            }
            mail to: EMAIL_ADDRESS,
            subject: "⚠️ TESTS FAILED - ${currentBuild.fullDisplayName}",
            mimeType: "text/html",
            body:  """
              <html>
                <head>
                    <style>
                        body { font-family: 'Arial', sans-serif; }
                        .header { font-size: 16px; font-weight: bold; color: #333; }
                    </style>
                </head>
                <body>
                  <p><em>${new Date()}</em></p>
                  <p>__________________________________________________________</p>

                  <h2 class="header">⚠️ BUILD UNSTABLE ⚠️</h2>

                  ${env.COMMIT_INFO}

                  ${env.STACK_INFO}

                  <p>Tests have been detected that have failed in Etendo Core.<br>To more information on the failing run visit: ${env.BUILD_URL}</p>

                  <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
                  <p>__________________________________________________________</p>
                </body>
              </html>
            """
        }
        failure {
            script {
                sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_FAILED_STATUS "Build Failed" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'
            }
            mail to: EMAIL_ADDRESS,
            subject: "🚫 ERROR IN ${currentBuild.fullDisplayName}",
            mimeType: "text/html",
            body:  """
              <html>
                <head>
                    <style>
                        body { font-family: 'Arial', sans-serif; }
                        .header { font-size: 16px; font-weight: bold; color: #333; }
                    </style>
                </head>
                <body>
                  <p><em>${new Date()}</em></p>
                  <p>__________________________________________________________</p>

                  <h2 class="header">🚫 BUILD FAILED 🚫</h2>

                  ${env.COMMIT_INFO}

                  ${env.STACK_INFO}

                  <p>The build has failed unexpectedly. This failure isn't likely to be caused by failing tests.<br>To more information on the failing run visit: ${env.BUILD_URL}</p>

                  <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
                  <p>__________________________________________________________</p>
                </body>
              </html>
            """
        }
    }
}