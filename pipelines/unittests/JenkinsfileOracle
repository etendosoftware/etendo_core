pipeline {

    options {
        disableConcurrentBuilds()
    }

    environment {
        CONTEXT_NAME        = 'etendo'
        BBDD_SID            = 'orclcdb'
        BBDD_PORT           = '5432'
        BBDD_SYSTEMUSER     = 'sys AS SYSDBA'
        BBDD_SYSTEMPASS     = 'rEUC0GRpxA'
        BBDD_USER           = 'C##TAD'
        BBDD_PASSWORD       = 'tad'
        NEXUS_USER          = credentials('nexus-admin-user')
        NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
        GITHUB_USER         = 'etendobot'
        GITHUB_TOKEN        = credentials('github-read-package-token')
        JAVA_HOME           = '/opt/java/openjdk/'
        CATALINA_HOME       = "${WORKSPACE}/apache-tomcat-8.5.75"
        TZ                  = 'UTC'
        LANG                = 'en_US.UTF-8'
        EMAIL_ADDRESS       = credentials('email_builds')
        URL_REPO            = 'https://github.com/etendosoftware/etendo_core'
        COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
        COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()
        ORCL_VERSION        = '19c'
    }

    agent {
        kubernetes {
            label 'jenkins-node-unittests-orcl'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-unittests-orcl-0
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-node-unittests-orcl
spec:
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: ''
  containers:
    - name: compiler
      image: futit/etendo_compiler:1.0.10
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 5000Mi
        requests:
          cpu: 3072m
          memory: 5000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock && rm
                /etc/apt/sources.list.d/pgdg.list || echo 0 && apt update && apt
                install -y curl
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext: {}
  """
        }
    }

    stages {
        stage('Build Environment') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    sh """
                    curl -O https://etendo-deploy.fra1.digitaloceanspaces.com/java/oracle-sqlcli-V1022102-01.tar.gz
                    tar xfz oracle-sqlcli-V1022102-01.tar.gz 2> /dev/null
                    chmod a+x sqlcl/bin/sql
                    """
                    sh """
                    echo "BEGIN
                      FOR r IN (select sid,serial# from v\\\$session where username='${BBDD_USER}')
                      LOOP
                          EXECUTE IMMEDIATE 'alter system kill session ''' || r.sid  || ',' || r.serial# || ''' immediate';
                      END LOOP;
                    END;
                    /

                    DROP USER ${BBDD_USER} CASCADE;
                    commit;

                    exit; " > kill.sql
                    """
                    sh './sqlcl/bin/sql sys/${BBDD_SYSTEMPASS}@db19c-oracle-db.oracle:1521/ORCLCDB AS SYSDBA @kill.sql'
                }
                sh 'printenv'
                echo 'Building Etendo Core'
                script {
                    try {
                        sh """
                        echo "context.name=${CONTEXT_NAME}\n
                        bbdd.rdbms=ORACLE\n
                        bbdd.driver=oracle.jdbc.driver.OracleDriver\n
                        bbdd.url=jdbc:oracle:thin:@db19c-oracle-db.oracle:1521:orclcdb?oracle.net.disableOob=true\n
                        bbdd.sid=${BBDD_SID}\n
                        bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                        bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                        bbdd.user=${BBDD_USER}\n
                        bbdd.password=${BBDD_PASSWORD}\n
                        bbdd.sessionConfig=ALTER SESSION SET NLS_DATE_FORMAT='DD-MM-YYYY' NLS_NUMERIC_CHARACTERS='.,'\n

                        nexusUser=${NEXUS_USER}\n
                        nexusPassword=${NEXUS_PASSWORD}\n
                        githubUser=${GITHUB_USER}\n
                        githubToken=${GITHUB_TOKEN}\n
                        allow.root=true\n
                        org.gradle.jvmargs=-Xmx2g -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" > gradle.properties
                        """
                        sh './gradlew prepareConfig --info --stacktrace'
                        sh 'curl -o apache-tomcat-8.5.75.tar.gz https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.75/bin/apache-tomcat-8.5.75.tar.gz'
                        sh 'tar -xvf apache-tomcat-8.5.75.tar.gz -C $WORKSPACE'
                        sh './gradlew setup --info --stacktrace'
                        sh './gradlew expandModules --info --stacktrace'
                        sh './gradlew install --info --stacktrace'
                        sh './gradlew smartbuild --info --stacktrace'
                        sh '$WORKSPACE/apache-tomcat-8.5.75/bin/catalina.sh start '
                        sh 'sleep 1m'
                        echo 'Build of Etendo Core Finished'
                        env.STATUSTEST = "1" //flag to indicate if any test failed
                        env.STATUSBUILD = "1"
                    } catch (Exception e) {
                        echo 'Build of Etendo Core FAILED'
                        currentBuild.result = 'FAILED'
                        error('Build Etendo Core FAILED!')
                        env.STATUSBUILD = "0"
                    }
                }
            }
        }
//___________________________________________________________________________________________
// ------------------------------ WEB SERVICE TEST ------------------------------------------
        stage ('Web Service Test Suite'){
            when {
                allOf {
                    branch 'develop'
                    expression {
                        env.STATUSBUILD == "1"
                    }
                }
            }
            steps {
                script {
                    try {
                        sh './gradlew test --tests org.openbravo.test.WebserviceTestSuite --info '
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/test',
                            reportFiles: '*.html',
                            reportName: 'WEB SERVICES TESTS REPORT',
                            reportTitles: ''
                        ])
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        echo '....TEST WEBSERVICE FAILED....'
                        currentBuild.result = 'UNSTABLE'
                        unstable('Web Service Test Failed')
                        env.STATUSTEST = "0"
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/test',
                            reportFiles: '*.html',
                            reportName: 'WEBSERVICES TESTS REPORT',
                            reportTitles: ''
                        ])
                    }
                }
                sh '$WORKSPACE/apache-tomcat-8.5.75/bin/catalina.sh stop'
                sh './gradlew --stop'
            }
        }
//___________________________________________________________________________________________
// -------------------------------- CLEAN DATABASE ------------------------------------------
        stage('Clean Database') {
            when {
                allOf {
                    branch 'develop'
                    expression {
                        env.STATUSBUILD == "1"
                    }
                }
            }
            steps {
                script {
                    try {
                        echo 'Cleaning Database...'
                        sh './sqlcl/bin/sql sys/${BBDD_SYSTEMPASS}@db19c-oracle-db.oracle:1521/ORCLCDB AS SYSDBA @kill.sql'
                        sh './gradlew install --info --stacktrace' //run a gradle task
                        sh './gradlew smartbuild --info' //run a gradle task
                        echo 'Database Cleaned'
                    } catch (Exception e) {
                        echo 'Clean Database FAILED'
                        currentBuild.result = 'FAILED'
                        error('Clean Database FAILED!')
                        env.STATUSBUILD = "0"
                    }
                }
            }
        }
//___________________________________________________________________________________________
// ------------------------------- STANDALONE TEST ------------------------------------------
        stage ('Standalone Test Suite'){
            when {
                allOf {
                    branch 'develop'
                    expression {
                        env.STATUSBUILD == "1"
                    }
                }
            }
            steps {
                script {
                    try {
                        sh './gradlew test --tests org.openbravo.test.StandaloneTestSuite --info '
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/test',
                            reportFiles: '*.html',
                            reportName: 'STANDALONE TESTS REPORT',
                            reportTitles: ''
                        ])
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        echo '....TEST STANDALONE FAILED....'
                        currentBuild.result = 'UNSTABLE'
                        unstable('Standalone Test Failed!')
                        env.STATUSTEST = "0"
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/reports/tests/test',
                            reportFiles: '*.html',
                            reportName: 'STANDALONE TESTS REPORT',
                            reportTitles: ''
                        ])
                    }
                }
            }
        }
//___________________________________________________________________________________________
// ----------------------------------- SPOCK TEST -------------------------------------------
        stage ('Spock Test') {
            when {
                allOf {
                    branch 'develop'
                    expression {
                        env.STATUSBUILD == "1"
                    }
                }
            }
            steps {
                script {
                    try {
                        sh './gradlew test --tests "com.etendoerp.*" --info'
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/spock-reports/',
                            reportFiles: '*.html',
                            reportName: 'SPOCK TESTS REPORT',
                            reportTitles: ''
                        ])
                    } catch (Exception e) {
                        echo 'Exception occurred: ' + e.toString()
                        echo '....TEST SPOCK FAILED....'
                        currentBuild.result = 'UNSTABLE'
                        unstable('Spock Test failed!')
                        env.STATUSTEST = "0"
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'build/spock-reports/',
                            reportFiles: '*.html',
                            reportName: 'SPOCK TESTS REPORT',
                            reportTitles: ''
                        ])
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                if (env.BRANCH_NAME == 'develop') {
                    sh './gradlew --stop'
                    sh './sqlcl/bin/sql sys/${BBDD_SYSTEMPASS}@db19c-oracle-db.oracle:1521/ORCLCDB AS SYSDBA @kill.sql'
                }
            }
            cleanWs deleteDirs: true
        }
        fixed {
            mail to: EMAIL_ADDRESS,
            subject: "✅ FIXED - ${currentBuild.fullDisplayName}",
            body: """
${new Date()}
__________________________________________________________

✅ ERRORS FIXED ✅

Commit: ${URL_REPO}/commit/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

The problems found in the previous run/s have been fixed! 💪
💡 These tests were run on an Oracle(${ORCL_VERSION}) database environment.
Check out the output in the following link:
${env.BUILD_URL}
__________________________________________________________
            """
        }
        unstable {
            mail to: EMAIL_ADDRESS,
            subject: "🔥 FAILING TESTS ON ${currentBuild.fullDisplayName}",
            body: """
${new Date()}
__________________________________________________________

🔥 BUILD UNSTABLE 🔥

Commit: ${URL_REPO}/commit/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

Tests have been detected that have failed in Etendo Core.
💡 These tests were run on an Oracle(${ORCL_VERSION}) database environment.
To more information on the failing run visit:
${env.BUILD_URL}
__________________________________________________________
            """
        }
        failure {
            mail to: EMAIL_ADDRESS,
            subject: "🚫 ERROR IN ${currentBuild.fullDisplayName}",
            body:  """
${new Date()}
__________________________________________________________

🚫 BUILD FAILED 🚫

Commit: ${URL_REPO}/commit/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

The build has failed unexpectedly. This failure isn't likely to be caused by failing tests.
💡 This build was on an Etendo Core environment with Oracle(${ORCL_VERSION}) database.
To more information on the failing run visit:
${env.BUILD_URL}
__________________________________________________________
            """
        }
    }
}
