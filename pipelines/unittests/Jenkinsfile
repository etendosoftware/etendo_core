pipeline {

  options {
    disableConcurrentBuilds()
  }

  environment {
    CONTEXT_NAME        = 'etendo'
    BBDD_SID            = 'etendo'
    BBDD_PORT           = '5432'
    BBDD_SYSTEMUSER     = 'postgres'
    BBDD_SYSTEMPASS     = 'syspass'
    BBDD_USER           = 'tad'
    BBDD_PASSWORD       = 'tad'
    NEXUS_USER          = credentials('nexus-admin-user')
    NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
    GITHUB_USER         = 'etendobot'
    GITHUB_TOKEN        = credentials('github-read-package-token')
    JAVA_HOME           = '/opt/java/openjdk/'
    LANG                = 'en_US.UTF-8'
    CATALINA_HOME       = "${WORKSPACE}/apache-tomcat-8.5.75"
    ACCESS_TOKEN        = credentials('access_token')
    EMAIL_ADDRESS       = credentials('email_builds')
    URL_REPO            = 'https://github.com/etendosoftware/etendo_core'
    COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
    COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()
    POSTGRES_VERSION    = '14'
  }

  agent {
    kubernetes {
      label 'jenkins-node-core-unittests'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-core-unittests-0
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-node-core-unittests
spec:
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: ''
  containers:
    - name: compiler
      image: futit/etendo_compiler:1.0.10
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 5000Mi
        requests:
          cpu: 3072m
          memory: 5000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock && rm
                /etc/apt/sources.list.d/pgdg.list || echo 0 && apt update && apt
                install -y curl
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
    - name: postgres
      image: postgres:14
      workingDir: /home/jenkins
      env:
        - name: POSTGRES_PASSWORD
          value: syspass
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext: {}
"""
    }
  }

  stages {
    stage('Build Environment') {
      steps {
        script {
          try {
            sh 'printenv'
            sh 'chmod a+x ./pipelines/unittests/build-update.sh'
            sh './pipelines/unittests/build-update.sh etendo_core pending "Starting build" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
            sh """
            echo -e "context.name=${CONTEXT_NAME}\n
            bbdd.sid=${BBDD_SID}\n
            bbdd.port=${BBDD_PORT}\n
            bbdd.systemUser=${BBDD_SYSTEMUSER}\n
            bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
            bbdd.user=${BBDD_USER}\n
            bbdd.password=${BBDD_PASSWORD}\n
            nexusUser=${NEXUS_USER}\n
            nexusPassword=${NEXUS_PASSWORD}\n
            githubUser=${GITHUB_USER}\n
            githubToken=${GITHUB_TOKEN}\n
            allow.root=true\n
            org.gradle.jvmargs=-Xmx3g -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" > gradle.properties
            """
            sh './gradlew prepareConfig --info --stacktrace'
            sh 'curl -o apache-tomcat-8.5.75.tar.gz https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.75/bin/apache-tomcat-8.5.75.tar.gz'
            sh 'tar -xvf apache-tomcat-8.5.75.tar.gz -C $WORKSPACE'
            sh './gradlew setup --info'
            sh './gradlew expandModules --info'
            sh './gradlew install --info --stacktrace'
            sh './gradlew smartbuild --info'
            sh '$WORKSPACE/apache-tomcat-8.5.75/bin/catalina.sh start '
            sh 'sleep 1m'
            env.STATUSTEST = "1" //flag to indicate if any test failed
            sh 'echo Build Succesful'
            env.STATUSBUILD = "1"
          } catch (Exception e) {
            echo 'Build of Etendo Core FAILED'
            currentBuild.result = 'FAILED'
            error('Build Etendo Core FAILED!')
            env.STATUSBUILD = "0"
          }
        }
      }
      post {
          success {
            sh './pipelines/unittests/build-update.sh etendo_core pending "Build successful" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
          }
          failure {
            sh './pipelines/unittests/build-update.sh etendo_core pending "Build failed" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
          }
      }
    }
//___________________________________________________________________________________________
// ------------------------------ WEB SERVICE TEST ------------------------------------------
    stage ('Web Service Test Suite'){
      when {
        expression {
          env.STATUSBUILD == "1"
        }
      }
      steps {
        sh './pipelines/unittests/build-update.sh etendo_core pending "Run test suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
        script {
          try {
            sh './gradlew test --tests org.openbravo.test.WebserviceTestSuite --info'
            publishHTML([
              allowMissing: true,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: 'build/reports/tests/test',
              reportFiles: '*.html',
              reportName: 'WEB SERVICES TESTS REPORT',
              reportTitles: ''
            ])
          } catch (Exception e) {
            echo 'Exception occurred: ' + e.toString()
            echo '....TEST WEBSERVICE FAILED....'
            currentBuild.result = 'UNSTABLE'
            unstable('Web Service Test Failed')
            env.STATUSTEST = "0"
            publishHTML([
              allowMissing: false,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: 'build/reports/tests/test',
              reportFiles: '*.html',
              reportName: 'WEBSERVICES TESTS REPORT',
              reportTitles: ''
            ])
          }
        }
        sh '$WORKSPACE/apache-tomcat-8.5.75/bin/catalina.sh stop'
        sh './gradlew --stop'
      }
    }
//___________________________________________________________________________________________
// -------------------------------- CLEAN DATABASE ------------------------------------------
    stage('Restart Environment') {
      environment {
        BBDD_SID = 'etendo2'
      }
      when {
        expression {
          env.STATUSBUILD == "1"
        }
      }
      steps {
        script {
          try {
            sh './gradlew --stop'
            sh 'sed -i "s/bbdd.sid=etendo/bbdd.sid=\${BBDD_SID}/g" gradle.properties'
            sh 'cat gradle.properties'
            sh './gradlew setup --info'
            echo 'Creating Database...'
            sh './gradlew install --info --stacktrace'
            sh './gradlew smartbuild --info'
            echo 'Database Cleaned'
          } catch (Exception e) {
            echo 'Clean Database FAILED'
            currentBuild.result = 'FAILED'
            error('Clean Database FAILED!')
            env.STATUSBUILD = "0"
          }
        }
      }
      post {
        success {
          sh './pipelines/unittests/build-update.sh etendo_core pending "Restart successful" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
        }
        failure {
          sh './pipelines/unittests/build-update.sh etendo_core pending "Restart failed" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
        }
      }
    }
//___________________________________________________________________________________________
// ------------------------------- STANDALONE TEST ------------------------------------------
    stage ('Standalone Test Suite'){
      when {
        expression {
          env.STATUSBUILD == "1"
        }
      }
      steps {
        script {
          try {
            sh './gradlew test --tests org.openbravo.test.StandaloneTestSuite --info '
            publishHTML([
              allowMissing: true,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: 'build/reports/tests/test',
              reportFiles: '*.html',
              reportName: 'STANDALONE TESTS REPORT',
              reportTitles: ''
            ])
          } catch (Exception e) {
            echo 'Exception occurred: ' + e.toString()
            echo '....TEST STANDALONE FAILED....'
            currentBuild.result = 'UNSTABLE'
            unstable('Standalone Test Failed!')
            env.STATUSTEST = "0"
            publishHTML([
              allowMissing: false,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: 'build/reports/tests/test',
              reportFiles: '*.html',
              reportName: 'STANDALONE TESTS REPORT',
              reportTitles: ''
            ])
          }
        }
      }
    }
//___________________________________________________________________________________________
// ----------------------------------- SPOCK TEST -------------------------------------------
    stage ('Spock Test'){
      when {
        expression {
          env.STATUSBUILD == "1"
        }
      }
      steps {
        script {
          try {
            sh './gradlew test --tests "com.etendoerp.*" --info'
            publishHTML([
              allowMissing: true,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: 'build/spock-reports/',
              reportFiles: '*.html',
              reportName: 'SPOCK TESTS REPORT',
              reportTitles: ''
            ])
          } catch (Exception e) {
            echo 'Exception occurred: ' + e.toString()
            echo '....TEST SPOCK FAILED....'
            currentBuild.result = 'UNSTABLE'
            unstable('Spock Test failed!')
            env.STATUSTEST = "0"
            publishHTML([
              allowMissing: false,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: 'build/spock-reports/',
              reportFiles: '*.html',
              reportName: 'SPOCK TESTS REPORT',
              reportTitles: ''
            ])
          }
        }
      }
    }
//___________________________________________________________________________________________
// ----------------------------------- DEPLOY SNAPSHOT --------------------------------------
    stage('Run Deploy Snapshot') {
      when {
        allOf {
          branch 'develop'
          expression {
              env.STATUSTEST == "1"
          }
        }
      }
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
          withCredentials([usernamePassword(credentialsId: "etendo_bot_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
              sh """
              git config user.name "$GIT_USERNAME"
              git config user.email "$GIT_USERNAME"
              """
              sh './pipelines/unittests/build-update.sh etendo_core pending "Deploying snapshot" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
              sh 'echo version.ts=\$(date +\"%s\") > version.properties'
              sh './gradlew publishCoreJar --info'
              sh 'git tag \"v\$(grep version.ts version.properties|cut -c 11-)\" -m \"Release SNAPSHOT \$(grep version.tag version.properties|cut -c 13-)\"'
              sh 'GIT_SSH_COMMAND=\"ssh -i ${keyfile}\" git push $GIT_URL \"v\$(grep version.ts version.properties|cut -c 11-)\"'
          }
        }
      }
      post {
        success {
          sh './pipelines/unittests/build-update.sh etendo_core pending "Snapshot deployed" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
        }
        failure {
          sh './pipelines/unittests/build-update.sh etendo_core pending "Snapshot deploy failed" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
        }
      }
    }
  }
  post{
    always {
      script {
        if (env.STATUSBUILD == "1") {
          if (env.STATUSTEST == "1") {
            sh './pipelines/unittests/build-update.sh etendo_core success "Successful Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
            echo "Successful Test"
          } else if (env.STATUSTEST == "0") {
            sh './pipelines/unittests/build-update.sh etendo_core failure "Failed Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
            echo "Failed Test"
          }
        }
      }
    }
    fixed {
      mail to: EMAIL_ADDRESS,
      subject: "✅ FIXED - ${currentBuild.fullDisplayName}",
      body: """
${new Date()}
__________________________________________________________

✅ ERRORS FIXED ✅

Commit: ${URL_REPO}/commit/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

💡 These tests were run on a Postgres(${POSTGRES_VERSION}) database environment.
The problems found in the previous run/s have been fixed! 💪
Check out the output in the following link:
${env.BUILD_URL}
__________________________________________________________
"""
      }
    unstable {
      script {
        sh './pipelines/unittests/build-update.sh etendo_core failure "Failed Tests" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
      }
        mail to: EMAIL_ADDRESS,
        subject: "⚠️ TESTS FAILED - ${currentBuild.fullDisplayName}",
        body: """
${new Date()}
__________________________________________________________

⚠️ BUILD UNSTABLE ⚠️

Commit: ${URL_REPO}/commit/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

Tests have been detected that have failed in Etendo Core.
💡 These tests were run on a Postgres(${POSTGRES_VERSION}) database environment.
To more information on the failing run visit:
${env.BUILD_URL}
__________________________________________________________
        """
    }
    failure {
      mail to: EMAIL_ADDRESS,
      subject: "⛔ ERROR - ${currentBuild.fullDisplayName}",
      body:  """
${new Date()}
__________________________________________________________

⛔ ERROR ⛔

Commit: ${URL_REPO}/commit/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

The build or publication has failed unexpectedly.
💡 This build was on an Etendo Core environment with Postgres(${POSTGRES_VERSION}) database.
To more information on the failing run visit:
${env.BUILD_URL}
__________________________________________________________
"""
    }
  }
}
