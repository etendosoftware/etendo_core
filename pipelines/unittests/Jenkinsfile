pipeline {
  options {
    disableConcurrentBuilds()
  }

  environment {
    // gradle.properties variables
    CONTEXT_NAME        = 'etendo'
    BBDD_SID            = 'etendo'
    BBDD_PORT           = '5432'
    BBDD_SYSTEMUSER     = 'postgres'
    BBDD_SYSTEMPASS     = 'syspass'
    BBDD_USER           = 'tad'
    BBDD_PASSWORD       = 'tad'
    NEXUS_USER          = credentials('nexus-admin-user')
    NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
    GITHUB_USER         = 'etendobot'
    GITHUB_TOKEN        = credentials('github-read-package-token')
    LANG                = 'en_US.UTF-8'

    ACCESS_TOKEN        = credentials('access_token_github')
    EMAIL_ADDRESS       = credentials('email_builds')

    URL_REPO            = 'https://github.com/etendosoftware/etendo_core'
    URL_REPO_GIT        = 'git@github.com:etendosoftware/etendo_core.git'

    REPO_NAME           = 'etendo_core'

    SUCCESS             = "SUCCESS"
    FAILED              = "FAILED"
    UNSTABLE            = "UNSTABLE"

    // Stack
    JAVA_HOME           = "/usr/lib/jvm/java-11-openjdk-amd64"
    TOMCAT_URL          = "https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.86/bin/apache-tomcat-9.0.86.tar.gz"
    POSTGRES_VERSION    = "14"

    CONTEXT_BUILD       = "Unit Tests with Postgres Database"

    COMMIT_INPROGRESS_STATUS = "pending"
    COMMIT_SUCCESS_STATUS    = "success"
    COMMIT_FAILED_STATUS     = "failure"
  }

  agent {
    kubernetes {
      inheritFrom 'jenkins-node-core-unittests'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-core-unittests-0
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-node-core-unittests
spec:
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: ''
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.6
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 5000Mi
        requests:
          cpu: 3072m
          memory: 5000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock && rm
                /etc/apt/sources.list.d/pgdg.list || echo 0 && apt update && apt
                install -y curl
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
    - name: postgres
      image: postgres:14
      workingDir: /home/jenkins
      env:
        - name: POSTGRES_PASSWORD
          value: syspass
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext: {}
"""
    }
  }

  stages {
    stage('Build Environment') {
      steps {
        container('compiler') {
          script {
            try {
              sh 'printenv'
              sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_INPROGRESS_STATUS "Starting build" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'

              echo "---------------- Stack Configuration ----------------"
              def rootDir = pwd()
              def stackConfig = load "${rootDir}/pipelines/unittests/utils/stackConfig.groovy"

              sh "wget -O apache-tomcat.tar.gz $TOMCAT_URL"
              sh "tar -xvf apache-tomcat.tar.gz -C $WORKSPACE"

              env.TOMCAT_FOLDER = stackConfig.getTomcatFolder()
              env.CATALINA_HOME = "${WORKSPACE}/${TOMCAT_FOLDER}"
              env.CATALINA_BASE = "${WORKSPACE}/${TOMCAT_FOLDER}"

              env.STACK_INFO = stackConfig.generateStackMessage()
              echo "__________________________________________________"
              echo "${env.STACK_INFO}"
              echo "__________________________________________________"

              withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                sh "GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git clone ${URL_REPO_GIT} ${REPO_NAME}"
              }
              dir(REPO_NAME) {
                echo "---------------- Getting Commit Information ----------------"
                sh "git checkout ${GIT_COMMIT}"
                def infoCommit = load "${rootDir}/pipelines/unittests/utils/infoCommit.groovy"
                env.COMMIT_INFO = infoCommit.generateCommitInfo(env.URL_REPO)

                sh """
                echo -e "context.name=${CONTEXT_NAME}\n
                bbdd.sid=${BBDD_SID}\n
                bbdd.port=${BBDD_PORT}\n
                bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                bbdd.user=${BBDD_USER}\n
                bbdd.password=${BBDD_PASSWORD}\n
                nexusUser=${NEXUS_USER}\n
                nexusPassword=${NEXUS_PASSWORD}\n
                githubUser=${GITHUB_USER}\n
                githubToken=${GITHUB_TOKEN}\n
                allow.root=true\n
                org.gradle.jvmargs=-Xmx3g -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" > gradle.properties
                """
                sh """
                ./gradlew prepareConfig --info
                ./gradlew setup --info
                ./gradlew expandModules --info
                ./gradlew install --info
                ./gradlew update.database  --info
                ./gradlew smartbuild --info
                """
              }
              sh "$WORKSPACE/$TOMCAT_FOLDER/bin/catalina.sh start"
              sh "sleep 1m"
              env.STATUSTEST = "1" //flag to indicate if any test failed
              sh 'echo Build Succesful'
              env.STATUSBUILD = "1"
            } catch (Exception e) {
              echo 'Build of Etendo Core FAILED'
              echo "Exception occurred: " + e.toString()
              currentBuild.result = FAILED
              error('Build Etendo Core FAILED!')
              env.STATUSBUILD = "0"
            }
          }
        }
      }
    }
//___________________________________________________________________________________________
// ------------------------------ WEB SERVICE TEST ------------------------------------------
    stage ('Web Service Test Suite'){
      when {
        expression {
          env.STATUSBUILD == "1"
        }
      }
      steps {
        sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_INPROGRESS_STATUS "Running Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'
        container('compiler') {
          script {
            dir(REPO_NAME) {
              try {
                sh './gradlew test --tests org.openbravo.test.WebserviceTestSuite --info'
                publishHTML([
                  allowMissing: true,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: 'build/reports/tests/test',
                  reportFiles: '*.html',
                  reportName: 'WEB SERVICES TESTS REPORT',
                  reportTitles: ''
                ])
              } catch (Exception e) {
                echo '....TEST WEBSERVICE FAILED....'
                echo 'Exception occurred: ' + e.toString()
                currentBuild.result = UNSTABLE
                unstable('Web Service Test Failed')
                env.STATUSTEST = "0"
                publishHTML([
                  allowMissing: false,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: 'build/reports/tests/test',
                  reportFiles: '*.html',
                  reportName: 'WEBSERVICES TESTS REPORT',
                  reportTitles: ''
                ])
              }
              sh "$WORKSPACE/$TOMCAT_FOLDER/bin/catalina.sh stop"
              sh './gradlew --stop'
            }
          }
        }
      }
    }
//___________________________________________________________________________________________
// ------------------------------- STANDALONE TEST ------------------------------------------
    stage ('Standalone Test Suite'){
      when {
        expression {
          env.STATUSBUILD == "1"
        }
      }
      steps {
        container('compiler') {
          script {
            dir(REPO_NAME) {
              try {
                sh './gradlew test --tests org.openbravo.test.StandaloneTestSuite --info '
                publishHTML([
                  allowMissing: true,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: 'build/reports/tests/test',
                  reportFiles: '*.html',
                  reportName: 'STANDALONE TESTS REPORT',
                  reportTitles: ''
                ])
              } catch (Exception e) {
                echo '....TEST STANDALONE FAILED....'
                echo 'Exception occurred: ' + e.toString()
                currentBuild.result = UNSTABLE
                unstable('Standalone Test Failed!')
                env.STATUSTEST = "0"
                publishHTML([
                  allowMissing: false,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: 'build/reports/tests/test',
                  reportFiles: '*.html',
                  reportName: 'STANDALONE TESTS REPORT',
                  reportTitles: ''
                ])
              }
            }
          }
        }
      }
    }
//___________________________________________________________________________________________
// ----------------------------------- SPOCK TEST -------------------------------------------
    stage ('Spock Test'){
      when {
        expression {
          env.STATUSBUILD == "1"
        }
      }
      steps {
        container('compiler') {
          script {
            dir(REPO_NAME) {
              try {
                sh './gradlew test --tests "com.etendoerp.*" --info'
                publishHTML([
                  allowMissing: true,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: 'build/spock-reports/',
                  reportFiles: '*.html',
                  reportName: 'SPOCK TESTS REPORT',
                  reportTitles: ''
                ])
              } catch (Exception e) {
                echo '....TEST SPOCK FAILED....'
                echo 'Exception occurred: ' + e.toString()
                currentBuild.result = UNSTABLE
                unstable('Spock Test failed!')
                env.STATUSTEST = "0"
                publishHTML([
                  allowMissing: false,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: 'build/spock-reports/',
                  reportFiles: '*.html',
                  reportName: 'SPOCK TESTS REPORT',
                  reportTitles: ''
                ])
              }
            }
          }
        }
      }
    }
//___________________________________________________________________________________________
// ----------------------------------- DEPLOY SNAPSHOT --------------------------------------
    stage('Run Deploy Snapshot') {
      when {
        allOf {
          branch 'develop'
          expression {
              env.STATUSTEST == "1"
          }
        }
      }
      steps {
        sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_INPROGRESS_STATUS "Deploying Snapshot" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL'
        container('compiler') {
          script {
            dir(REPO_NAME) {
              withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                withCredentials([usernamePassword(credentialsId: "etendo_bot_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh """
                    git config user.name "$GIT_USERNAME"
                    git config user.email "$GIT_USERNAME"
                    """
                    sh 'echo version.ts=\$(date +\"%s\") > version.properties'
                    sh './gradlew publishCoreJar --info'
                    sh 'git tag \"v\$(grep version.ts version.properties|cut -c 11-)\" -m \"Release SNAPSHOT \$(grep version.tag version.properties|cut -c 13-)\"'
                    sh 'GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git push $GIT_URL \"v\$(grep version.ts version.properties|cut -c 11-)\"'
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    success {
        script {
            sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_SUCCESS_STATUS "Successful Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'
            echo "Successful Test"
        }
    }
    fixed {
      mail to: EMAIL_ADDRESS,
      subject: "✅ FIXED - ${currentBuild.fullDisplayName}",
      mimeType: "text/html",
      body:  """
        <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
            <p><em>${new Date()}</em></p>
            <p>__________________________________________________________</p>

            <h2 class="header">✅ ERRORS FIXED ✅</h2>

            ${env.COMMIT_INFO}

            ${env.STACK_INFO}

            <p>The problems found in the previous run/s have been fixed! 💪<br>Check out the output in the following link: ${env.BUILD_URL}</p>

            <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
            <p>__________________________________________________________</p>
          </body>
        </html>
      """
    }
    unstable {
      script {
        sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_FAILED_STATUS "Failed Test Suites" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'
        echo "Failed Test"
      }
      mail to: EMAIL_ADDRESS,
      subject: "⚠️ TESTS FAILED - ${currentBuild.fullDisplayName}",
      mimeType: "text/html",
      body:  """
        <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
            <p><em>${new Date()}</em></p>
            <p>__________________________________________________________</p>

            <h2 class="header">⚠️ BUILD UNSTABLE ⚠️</h2>

            ${env.COMMIT_INFO}

            ${env.STACK_INFO}

            <p>Tests have been detected that have failed in Etendo Core.<br>To more information on the failing run visit: ${env.BUILD_URL}</p>

            <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
            <p>__________________________________________________________</p>
          </body>
        </html>
      """
    }
    failure {
      script {
        sh './pipelines/unittests/build-update.sh $REPO_NAME $COMMIT_FAILED_STATUS "Build Failed" $ACCESS_TOKEN $GIT_COMMIT $BUILD_URL \"${CONTEXT_BUILD}\"'
      }
      mail to: EMAIL_ADDRESS,
      subject: "⛔ ERROR - ${currentBuild.fullDisplayName}",
      mimeType: "text/html",
      body:  """
        <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
            <p><em>${new Date()}</em></p>
            <p>__________________________________________________________</p>

            <h2 class="header">🚫 BUILD FAILED 🚫</h2>

            ${env.COMMIT_INFO}

            ${env.STACK_INFO}

            <p>The build has failed unexpectedly. This failure isn't likely to be caused by failing tests.<br>To more information on the failing run visit: ${env.BUILD_URL}</p>

            <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
            <p>__________________________________________________________</p>
          </body>
        </html>
      """
    }
  }
}