<?xml version="1.0" encoding="UTF-8" ?>
<!--
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html 
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License. 
 * The Original Code is Openbravo ERP. 
 * The Initial Developer of the Original Code is Openbravo SLU 
 * All portions are Copyright (C) 2001-2019 Openbravo SLU 
 * All Rights Reserved. 
 * Contributor(s):  ______________________________________.
 ************************************************************************
-->

<SqlClass name="ReportInvoiceCustomerDimensionalAnalysesJRData" package="org.openbravo.erpCommon.ad_reports">
  <SqlClassComment></SqlClassComment>
  <SqlMethod name="select" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT B.* FROM (
      SELECT NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 
      SUM(AMOUNT) AS AMOUNT, SUM(QTY) AS QTY, SUM(WEIGHT) AS WEIGHT, SUM(COST) AS COST,
      SUM(AMOUNTREF) AS AMOUNTREF, SUM(QTYREF) AS QTYREF, SUM(WEIGHTREF) AS WEIGHTREF, SUM(COSTREF) AS COSTREF,
      SUM(CONVAMOUNT) AS CONVAMOUNT,                          
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOST) WHEN SUM(COSTEDAMT) = 0 THEN 0 WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNT END) = 0 THEN 0 ELSE SUM(CONVCOST)*SUM(CONVAMOUNT)/SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNT END) END AS CONVCOST,
      SUM(CONVAMOUNTREF) AS CONVAMOUNTREF,
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOSTREF) WHEN SUM(COSTEDAMTREF) = 0 THEN 0 WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF END) = 0 THEN 0 ELSE SUM(CONVCOSTREF)*SUM(CONVAMOUNTREF)/SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF END) END AS CONVCOSTREF,
      C_CURRENCY_SYMBOL(?, 0, 'Y') AS CONVSYM,        
      C_CURRENCY_ISOSYM(?) AS CONVISOSYM,
      '' AS ID, '' AS NAME, '' AS TRANSCURRENCYID, '' AS TRANSDATE, '' AS TRANSCLIENTID, '' AS TRANSORGID, SUM(ZZ.COSTCALCULATED) AS COSTCALCULATED,
      '' AS ORG, '' AS PARTNERGROUP, '' AS PARTNER, '' AS DOCUMENTNO, '' AS INVOICEDATE, '' AS PRODCATEGORY, '' AS PRODUCT, 
      '' AS PROFIT, '' AS MARGIN, '' AS PRICE, '' AS CONTACT, '' AS SALESREP, '' AS PROJECT, '' AS ADDRESS, 
      '' AS DOCTYPECOUNT, '' AS DOCTYPE, '' AS DOCTYPENAME,   
      '' AS AMOUNTREF2, '' AS QTYREF2, '' AS WEIGHTREF2, '' AS COSTREF2, '' AS CONVAMOUNTREF2, '' AS CONVCOSTREF2,
      '' AS AMOUNTREF3, '' AS QTYREF3, '' AS WEIGHTREF3, '' AS COSTREF3, '' AS CONVAMOUNTREF3, '' AS CONVCOSTREF3,
      '' AS SEARCHKEY, '' AS UNITPRICE     
      FROM (SELECT NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 
      SUM(LINENETAMT) AS AMOUNT, SUM(QTYINVOICED) AS QTY, SUM(WEIGHT) AS WEIGHT, SUM(COST) AS COST, 
      SUM(LINENETREF) AS AMOUNTREF, SUM(QTYINVOICEDREF) AS QTYREF, SUM(WEIGHT_REF) AS WEIGHTREF, SUM(COSTREF) AS COSTREF,         
      C_CURRENCY_CONVERT(SUM(LINENETAMT), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNT, 
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(COST) WHEN SUM(COSTEDAMT) = 0 THEN 0 ELSE SUM(COST)*SUM(LINENETAMT)/SUM(COSTEDAMT) END AS CONVCOST,
      C_CURRENCY_CONVERT(SUM(LINENETREF), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNTREF, 
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(COSTREF) WHEN SUM(COSTEDAMTREF) = 0 THEN 0 ELSE SUM(COSTREF)*SUM(LINENETREF)/SUM(COSTEDAMTREF) END AS CONVCOSTREF,
      TRCURRENCYID, TRDATE, TRCLIENTID, TRORGID, SUM(AA.COSTCALCULATED) as COSTCALCULATED,
      C_CURRENCY_CONVERT(SUM(COSTEDAMT), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamt,
      C_CURRENCY_CONVERT(SUM(COSTEDAMTREF), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamtref,
      COUNT(*) AS GROUPCOUNT
      FROM (SELECT to_char('1') AS NIVEL1, to_char('2') AS NIVEL2, to_char('3') AS NIVEL3, to_char('4') AS NIVEL4, to_char('5') AS NIVEL5, to_char('6') AS NIVEL6, to_char('7') AS NIVEL7, to_char('16') AS NIVEL8, to_char('18') AS NIVEL9, to_char('20') AS NIVEL10,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.LINENETAMT *- 1 ELSE c_invoiceline.LINENETAMT END AS LINENETAMT,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICED,
      C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT, 
      0 AS LINENETREF, 0 AS QTYINVOICEDREF, 0 AS WEIGHT_REF, C_UOM.UOMSYMBOL,
      C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,  
      TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,      
      C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,      
      C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                CASE WHEN (M_PRODUCT.ISSTOCKED='Y' AND M_PRODUCT.PRODUCTTYPE='I') THEN (CASE WHEN trx.movementqty = 0 THEN 0 ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION (ROUND(sum(trxcost.cost)/abs(trx.movementqty)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END), C_GET_CURRENCY_PRECISION(trxcost.c_currency_id, 'C')), trxcost.c_currency_id,?,trx.movementdate,NULL,trx.ad_client_id,trx.ad_org_id,'C'), 0) END)
                     ELSE (COALESCE(M_GET_NO_TRX_PRODUCT_COST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, 'STA', ad_org.ad_org_id, null, C_INVOICE.C_CURRENCY_ID), 0)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END))
                END AS COST,
                0 AS COSTREF,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMT, 0 AS COSTEDAMTREF
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join m_transaction_cost trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
      AND C_INVOICE.PROCESSED = 'Y'
      AND 0=0 AND C_INVOICE.AD_ORG_ID IN ('1')
      AND C_INVOICE.AD_CLIENT_ID IN ('7')
      AND 1=1
      AND ((trxcost.m_transaction_cost_id is not null and trxcost.isunitcost = 'Y') or (trxcost.m_transaction_cost_id is null))
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE
      UNION ALL SELECT to_char('8') AS NIVEL1 , to_char('9') AS NIVEL2 , to_char('10') AS NIVEL3 , to_char('11') AS NIVEL4 , to_char('12') AS NIVEL5 , to_char('13') AS NIVEL6 , to_char('14') AS NIVEL7 , to_char('17') AS NIVEL8 , to_char('19') AS NIVEL9 , to_char('21') AS NIVEL10,
      0 AS LINENETAMT, 0 AS QTYINVOICED, 0 AS WEIGHT, 
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.LINENETAMT *- 1 ELSE c_invoiceline.LINENETAMT END AS LINENETREF,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICEDREF, 
      C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT_REF,
      C_UOM.UOMSYMBOL,
      C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,
      TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,
      C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,
      C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                0 AS COST,
                CASE WHEN (M_PRODUCT.ISSTOCKED='Y' AND M_PRODUCT.PRODUCTTYPE='I') THEN (CASE WHEN trx.movementqty = 0 THEN 0 ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION (ROUND(sum(trxcost.cost)/abs(trx.movementqty)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END), C_GET_CURRENCY_PRECISION(trxcost.c_currency_id, 'C')), trxcost.c_currency_id,?,trx.movementdate,NULL,trx.ad_client_id,trx.ad_org_id,'C'), 0) END)
                     ELSE (COALESCE(M_GET_NO_TRX_PRODUCT_COST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, 'STA', ad_org.ad_org_id, null, C_INVOICE.C_CURRENCY_ID), 0)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END))
                END AS COSTREF,
                0 AS COSTEDAMT,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMTREF
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join m_transaction_cost trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
      AND C_INVOICE.PROCESSED = 'Y'
      AND 3=3 AND C_INVOICE.AD_ORG_ID IN ('1')
      AND C_INVOICE.AD_CLIENT_ID IN('14')
      AND ((trxcost.m_transaction_cost_id is not null and trxcost.isunitcost = 'Y') or (trxcost.m_transaction_cost_id is null))
      AND 2=2
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE
      ORDER BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10) AA
      GROUP BY  NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, TRCURRENCYID, TRDATE, TRCLIENTID, TRORGID) ZZ
      GROUP BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 1
      ) B
     ]]></Sql>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>    
    <Parameter name="nivel1" type="replace" optional="true" after="FROM (SELECT to_char(" text="'1'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1, to_char(" text="'2'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2, to_char(" text="'3'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3, to_char(" text="'4'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4, to_char(" text="'5'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5, to_char(" text="'6'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6, to_char(" text="'7'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7, to_char(" text="'16'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8, to_char(" text="'18'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9, to_char(" text="'20'"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND 0=0 AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID IN (" text="'7'"/>
    <Parameter name="dateFrom" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateTo" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 1=1"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 1=1"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 1=1"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 1=1"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="nivel1" type="replace" optional="true" after="UNION ALL SELECT to_char(" text="'8'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1 , to_char(" text="'9'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2 , to_char(" text="'10'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3 , to_char(" text="'11'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4 , to_char(" text="'12'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5 , to_char(" text="'13'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6 , to_char(" text="'14'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7 , to_char(" text="'17'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8 , to_char(" text="'19'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9 , to_char(" text="'21'"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND 3=3 AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID IN(" text="'14'"/>
    <Parameter name="dateFromRef" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateToRef" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 2=2"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 2=2"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 2=2"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 2=2"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="orderby" type="replace" optional="true" after="GROUP BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10" text=", 1"/>
    <Parameter name="pgLimit" type="argument" optional="true" after=") B"><![CDATA[LIMIT ]]></Parameter>
    <Parameter name="oraLimit1" type="argument" optional="true" after=") B"><![CDATA[WHERE ROWNUM <= ]]></Parameter>
  </SqlMethod>
  
  <SqlMethod name="select2" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT B.* FROM (
      SELECT NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 
      SUM(AMOUNT) AS AMOUNT, SUM(QTY) AS QTY, SUM(WEIGHT) AS WEIGHT, SUM(COST) AS COST,
      SUM(AMOUNTREF) AS AMOUNTREF, SUM(QTYREF) AS QTYREF, SUM(WEIGHTREF) AS WEIGHTREF, SUM(COSTREF) AS COSTREF,
      SUM(AMOUNTREF2) AS AMOUNTREF2, SUM(QTYREF2) AS QTYREF2, SUM(WEIGHTREF2) AS WEIGHTREF2, SUM(COSTREF2) AS COSTREF2,
      SUM(CONVAMOUNT) AS CONVAMOUNT,                          
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOST) WHEN SUM(COSTEDAMT) = 0 THEN 0 WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNT END) = 0 THEN 0 ELSE SUM(CONVCOST)*SUM(CONVAMOUNT)/SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNT END) END AS CONVCOST,
      SUM(CONVAMOUNTREF) AS CONVAMOUNTREF,
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOSTREF) WHEN SUM(COSTEDAMTREF) = 0 THEN 0 WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF END) = 0 THEN 0 ELSE SUM(CONVCOSTREF)*SUM(CONVAMOUNTREF)/SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF END) END AS CONVCOSTREF,
      SUM(CONVAMOUNTREF2) AS CONVAMOUNTREF2,
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOSTREF2) WHEN SUM(COSTEDAMTREF2) = 0 THEN 0 WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF2 END) = 0 THEN 0 ELSE SUM(CONVCOSTREF2)*SUM(CONVAMOUNTREF2)/SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF2 END) END AS CONVCOSTREF2,
      C_CURRENCY_SYMBOL(?, 0, 'Y') AS CONVSYM,        
      C_CURRENCY_ISOSYM(?) AS CONVISOSYM,
      '' AS ID, '' AS NAME, '' AS TRANSCURRENCYID, '' AS TRANSDATE, '' AS TRANSCLIENTID, '' AS TRANSORGID, SUM(ZZ.COSTCALCULATED) AS COSTCALCULATED,
      '' AS ORG, '' AS PARTNERGROUP, '' AS PARTNER, '' AS DOCUMENTNO, '' AS INVOICEDATE, '' AS PRODCATEGORY, '' AS PRODUCT, 
      '' AS PROFIT, '' AS MARGIN, '' AS PRICE, '' AS CONTACT, '' AS SALESREP, '' AS PROJECT, '' AS ADDRESS
      FROM (SELECT NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 
      SUM(LINENETAMT) AS AMOUNT, SUM(QTYINVOICED) AS QTY, SUM(WEIGHT) AS WEIGHT, SUM(COST) AS COST, 
      SUM(LINENETREF) AS AMOUNTREF, SUM(QTYINVOICEDREF) AS QTYREF, SUM(WEIGHT_REF) AS WEIGHTREF, SUM(COSTREF) AS COSTREF,
      SUM(LINENETREF2) AS AMOUNTREF2, SUM(QTYINVOICEDREF2) AS QTYREF2, SUM(WEIGHT_REF2) AS WEIGHTREF2, SUM(COSTREF2) AS COSTREF2,         
      C_CURRENCY_CONVERT(SUM(LINENETAMT), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNT, 
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(COST) WHEN SUM(COSTEDAMT) = 0 THEN 0 ELSE SUM(COST)*SUM(LINENETAMT)/SUM(COSTEDAMT) END AS CONVCOST,
      C_CURRENCY_CONVERT(SUM(LINENETREF), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNTREF, 
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(COSTREF) WHEN SUM(COSTEDAMTREF) = 0 THEN 0 ELSE SUM(COSTREF)*SUM(LINENETREF)/SUM(COSTEDAMTREF) END AS CONVCOSTREF,
      C_CURRENCY_CONVERT(SUM(LINENETREF2), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNTREF2, 
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(COSTREF2) WHEN SUM(COSTEDAMTREF2) = 0 THEN 0 ELSE SUM(COSTREF2)*SUM(LINENETREF2)/SUM(COSTEDAMTREF2) END AS CONVCOSTREF2,
      TRCURRENCYID, TRDATE, TRCLIENTID, TRORGID, SUM(AA.COSTCALCULATED) as COSTCALCULATED,
      C_CURRENCY_CONVERT(SUM(COSTEDAMT), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamt,
      C_CURRENCY_CONVERT(SUM(COSTEDAMTREF), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamtref,
      C_CURRENCY_CONVERT(SUM(COSTEDAMTREF2), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamtref2,
      COUNT(*) AS GROUPCOUNT
      FROM (SELECT to_char('1') AS NIVEL1, to_char('2') AS NIVEL2, to_char('3') AS NIVEL3, to_char('4') AS NIVEL4, to_char('5') AS NIVEL5, to_char('6') AS NIVEL6, to_char('7') AS NIVEL7, to_char('16') AS NIVEL8, to_char('18') AS NIVEL9, to_char('20') AS NIVEL10,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.LINENETAMT *- 1 ELSE c_invoiceline.LINENETAMT END AS LINENETAMT,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICED,
      C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT, 
      0 AS LINENETREF, 0 AS QTYINVOICEDREF, 0 AS WEIGHT_REF,
      0 AS LINENETREF2, 0 AS QTYINVOICEDREF2, 0 AS WEIGHT_REF2, 
      C_UOM.UOMSYMBOL,
      C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,  
      TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,      
      C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,      
      C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                CASE WHEN (M_PRODUCT.ISSTOCKED='Y' AND M_PRODUCT.PRODUCTTYPE='I') THEN (CASE WHEN trx.movementqty = 0 THEN 0 ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION (ROUND(sum(trxcost.cost)/abs(trx.movementqty)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END), C_GET_CURRENCY_PRECISION(trxcost.c_currency_id, 'C')), trxcost.c_currency_id,?,trx.movementdate,NULL,trx.ad_client_id,trx.ad_org_id,'C'), 0) END)
                     ELSE (COALESCE(M_GET_NO_TRX_PRODUCT_COST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, 'STA', ad_org.ad_org_id, null, C_INVOICE.C_CURRENCY_ID), 0)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END))
                END AS COST,
                0 AS COSTREF,
                0 AS COSTREF2,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMT, 
                0 AS COSTEDAMTREF, 
                0 AS COSTEDAMTREF2
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join m_transaction_cost trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
      AND C_INVOICE.PROCESSED = 'Y'
      AND 0=0 AND C_INVOICE.AD_ORG_ID IN ('1')
      AND C_INVOICE.AD_CLIENT_ID IN ('7')
      AND ((trxcost.m_transaction_cost_id is not null and trxcost.isunitcost = 'Y') or (trxcost.m_transaction_cost_id is null))
      AND 1=1
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE
      UNION ALL SELECT to_char('8') AS NIVEL1 , to_char('9') AS NIVEL2 , to_char('10') AS NIVEL3 , to_char('11') AS NIVEL4 , to_char('12') AS NIVEL5 , to_char('13') AS NIVEL6 , to_char('14') AS NIVEL7 , to_char('17') AS NIVEL8 , to_char('19') AS NIVEL9 , to_char('21') AS NIVEL10,
      0 AS LINENETAMT, 0 AS QTYINVOICED, 0 AS WEIGHT, 
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.LINENETAMT *- 1 ELSE c_invoiceline.LINENETAMT END AS LINENETREF,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICEDREF,
      C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT_REF,
      0 AS LINENETREF2, 0 AS QTYINVOICEDREF2, 0 AS WEIGHT_REF2,
      C_UOM.UOMSYMBOL,
      C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,
      TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,
      C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,
      C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                0 AS COST,
                CASE WHEN (M_PRODUCT.ISSTOCKED='Y' AND M_PRODUCT.PRODUCTTYPE='I') THEN (CASE WHEN trx.movementqty = 0 THEN 0 ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION (ROUND(sum(trxcost.cost)/abs(trx.movementqty)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END), C_GET_CURRENCY_PRECISION(trxcost.c_currency_id, 'C')), trxcost.c_currency_id,?,trx.movementdate,NULL,trx.ad_client_id,trx.ad_org_id,'C'), 0) END)
                     ELSE (COALESCE(M_GET_NO_TRX_PRODUCT_COST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, 'STA', ad_org.ad_org_id, null, C_INVOICE.C_CURRENCY_ID), 0)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END))
                END AS COSTREF,
                0 AS COSTREF2,
                0 AS COSTEDAMT,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMTREF,
                0 AS COSTEDAMTREF2
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join m_transaction_cost trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
      AND C_INVOICE.PROCESSED = 'Y'
      AND 3=3 AND C_INVOICE.AD_ORG_ID IN ('1')
      AND C_INVOICE.AD_CLIENT_ID IN('14')
      AND ((trxcost.m_transaction_cost_id is not null and trxcost.isunitcost = 'Y') or (trxcost.m_transaction_cost_id is null))
      AND 2=2
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE
      UNION ALL SELECT  to_char('28') AS NIVEL1 ,to_char('29') AS NIVEL2 ,to_char('30') AS NIVEL3 ,to_char('31') AS NIVEL4 ,to_char('32') AS NIVEL5 ,to_char('33') AS NIVEL6 ,to_char('34') AS NIVEL7 ,to_char('35') AS NIVEL8 ,to_char('36') AS NIVEL9 ,to_char('37') AS NIVEL10,
      0 AS LINENETAMT, 0 AS QTYINVOICED, 0 AS WEIGHT, 
      0 AS LINENETREF, 0 AS QTYINVOICEDREF, 0 AS WEIGHT_REF,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.LINENETAMT *- 1 ELSE c_invoiceline.LINENETAMT END AS LINENETREF2,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICEDREF2,
      C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT_REF2,
      C_UOM.UOMSYMBOL,
      C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,
      TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,
      C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,
      C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                0 AS COST,
                0 AS COSTREF,
                CASE WHEN (M_PRODUCT.ISSTOCKED='Y' AND M_PRODUCT.PRODUCTTYPE='I') THEN (CASE WHEN trx.movementqty = 0 THEN 0 ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION (ROUND(sum(trxcost.cost)/abs(trx.movementqty)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END), C_GET_CURRENCY_PRECISION(trxcost.c_currency_id, 'C')), trxcost.c_currency_id,?,trx.movementdate,NULL,trx.ad_client_id,trx.ad_org_id,'C'), 0) END)
                     ELSE (COALESCE(M_GET_NO_TRX_PRODUCT_COST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, 'STA', ad_org.ad_org_id, null, C_INVOICE.C_CURRENCY_ID), 0)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END))
                END AS COSTREF2,                
                0 AS COSTEDAMT,
                0 AS COSTEDAMTREF,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMTREF2                
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join m_transaction_cost trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
      AND C_INVOICE.PROCESSED = 'Y'
      AND 5=5 AND C_INVOICE.AD_ORG_ID IN ('1')
      AND C_INVOICE.AD_CLIENT_ID  IN('38')
      AND ((trxcost.m_transaction_cost_id is not null and trxcost.isunitcost = 'Y') or (trxcost.m_transaction_cost_id is null))
      AND 4=4
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE
      ORDER BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10) AA
      GROUP BY  NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, TRCURRENCYID, TRDATE, TRCLIENTID, TRORGID) ZZ
      GROUP BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 1
      ) B
     ]]></Sql>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>       
    <Parameter name="nivel1" type="replace" optional="true" after="FROM (SELECT to_char(" text="'1'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1, to_char(" text="'2'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2, to_char(" text="'3'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3, to_char(" text="'4'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4, to_char(" text="'5'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5, to_char(" text="'6'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6, to_char(" text="'7'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7, to_char(" text="'16'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8, to_char(" text="'18'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9, to_char(" text="'20'"/>
    <Parameter name="cCurrencyConv"/> 
    <Parameter name="adOrgId" optional="true" type="replace" after="AND 0=0 AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID IN (" text="'7'"/>
    <Parameter name="dateFrom" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateTo" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 1=1"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 1=1"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 1=1"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 1=1"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="nivel1" type="replace" optional="true" after="UNION ALL SELECT to_char(" text="'8'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1 , to_char(" text="'9'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2 , to_char(" text="'10'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3 , to_char(" text="'11'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4 , to_char(" text="'12'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5 , to_char(" text="'13'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6 , to_char(" text="'14'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7 , to_char(" text="'17'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8 , to_char(" text="'19'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9 , to_char(" text="'21'"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND 3=3 AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID IN(" text="'14'"/>
    <Parameter name="dateFromRef" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateToRef" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 2=2"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 2=2"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 2=2"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 2=2"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="nivel1" type="replace" optional="true" after="UNION ALL SELECT  to_char(" text="'28'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1 ,to_char(" text="'29'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2 ,to_char(" text="'30'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3 ,to_char(" text="'31'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4 ,to_char(" text="'32'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5 ,to_char(" text="'33'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6 ,to_char(" text="'34'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7 ,to_char(" text="'35'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8 ,to_char(" text="'36'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9 ,to_char(" text="'37'"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND 5=5 AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID  IN(" text="'38'"/>
    <Parameter name="dateFromRef2" optional="true" after="AND 4=4"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateToRef2" optional="true" after="AND 4=4"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 4=4"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 4=4"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 4=4"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 4=4"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 4=4"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 4=4"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 4=4"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 4=4"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 4=4"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 4=4"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="orderby" type="replace" optional="true" after="GROUP BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10" text=", 1"/>
    <Parameter name="pgLimit" type="argument" optional="true" after=") B"><![CDATA[LIMIT ]]></Parameter>
    <Parameter name="oraLimit1" type="argument" optional="true" after=") B"><![CDATA[WHERE ROWNUM <= ]]></Parameter>
  </SqlMethod>
  
  <SqlMethod name="select3" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT B.* FROM (
      SELECT NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 
      SUM(AMOUNT) AS AMOUNT, SUM(QTY) AS QTY, SUM(WEIGHT) AS WEIGHT, SUM(COST) AS COST,
      SUM(AMOUNTREF) AS AMOUNTREF, SUM(QTYREF) AS QTYREF, SUM(WEIGHTREF) AS WEIGHTREF, SUM(COSTREF) AS COSTREF,
      SUM(AMOUNTREF2) AS AMOUNTREF2, SUM(QTYREF2) AS QTYREF2, SUM(WEIGHTREF2) AS WEIGHTREF2, SUM(COSTREF2) AS COSTREF2,
      SUM(AMOUNTREF3) AS AMOUNTREF3, SUM(QTYREF3) AS QTYREF3, SUM(WEIGHTREF3) AS WEIGHTREF3, SUM(COSTREF3) AS COSTREF3,
      SUM(CONVAMOUNT) AS CONVAMOUNT,                          
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOST) WHEN SUM(COSTEDAMT) = 0 THEN 0 WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNT END) = 0 THEN 0 ELSE SUM(CONVCOST)*SUM(CONVAMOUNT)/SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNT END) END AS CONVCOST,
      SUM(CONVAMOUNTREF) AS CONVAMOUNTREF,
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOSTREF) WHEN SUM(COSTEDAMTREF) = 0 THEN 0 WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF END) = 0 THEN 0 ELSE SUM(CONVCOSTREF)*SUM(CONVAMOUNTREF)/SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF END) END AS CONVCOSTREF,
      SUM(CONVAMOUNTREF2) AS CONVAMOUNTREF2,
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOSTREF2) WHEN SUM(COSTEDAMTREF2) = 0 THEN 0 WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF2 END) = 0 THEN 0 ELSE SUM(CONVCOSTREF2)*SUM(CONVAMOUNTREF2)/SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF2 END) END AS CONVCOSTREF2,
      SUM(CONVAMOUNTREF3) AS CONVAMOUNTREF3,
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOSTREF3) WHEN SUM(COSTEDAMTREF3) = 0 THEN 0 WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF3 END) = 0 THEN 0 ELSE SUM(CONVCOSTREF3)*SUM(CONVAMOUNTREF3)/SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNTREF3 END) END AS CONVCOSTREF3,
      C_CURRENCY_SYMBOL(?, 0, 'Y') AS CONVSYM,        
      C_CURRENCY_ISOSYM(?) AS CONVISOSYM,
      '' AS ID, '' AS NAME, '' AS TRANSCURRENCYID, '' AS TRANSDATE, '' AS TRANSCLIENTID, '' AS TRANSORGID, SUM(ZZ.COSTCALCULATED) AS COSTCALCULATED,
      '' AS ORG, '' AS PARTNERGROUP, '' AS PARTNER, '' AS DOCUMENTNO, '' AS INVOICEDATE, '' AS PRODCATEGORY, '' AS PRODUCT, 
      '' AS PROFIT, '' AS MARGIN, '' AS PRICE, '' AS CONTACT, '' AS SALESREP, '' AS PROJECT, '' AS ADDRESS
      FROM (SELECT NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 
      SUM(LINENETAMT) AS AMOUNT, SUM(QTYINVOICED) AS QTY, SUM(WEIGHT) AS WEIGHT, SUM(COST) AS COST, 
      SUM(LINENETREF) AS AMOUNTREF, SUM(QTYINVOICEDREF) AS QTYREF, SUM(WEIGHT_REF) AS WEIGHTREF, SUM(COSTREF) AS COSTREF,
      SUM(LINENETREF2) AS AMOUNTREF2, SUM(QTYINVOICEDREF2) AS QTYREF2, SUM(WEIGHT_REF2) AS WEIGHTREF2, SUM(COSTREF2) AS COSTREF2,
      SUM(LINENETREF3) AS AMOUNTREF3, SUM(QTYINVOICEDREF3) AS QTYREF3, SUM(WEIGHT_REF3) AS WEIGHTREF3, SUM(COSTREF3) AS COSTREF3,         
      C_CURRENCY_CONVERT(SUM(LINENETAMT), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNT, 
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(COST) WHEN SUM(COSTEDAMT) = 0 THEN 0 ELSE SUM(COST)*SUM(LINENETAMT)/SUM(COSTEDAMT) END AS CONVCOST,
      C_CURRENCY_CONVERT(SUM(LINENETREF), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNTREF, 
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(COSTREF) WHEN SUM(COSTEDAMTREF) = 0 THEN 0 ELSE SUM(COSTREF)*SUM(LINENETREF)/SUM(COSTEDAMTREF) END AS CONVCOSTREF,
      C_CURRENCY_CONVERT(SUM(LINENETREF2), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNTREF2, 
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(COSTREF2) WHEN SUM(COSTEDAMTREF2) = 0 THEN 0 ELSE SUM(COSTREF2)*SUM(LINENETREF2)/SUM(COSTEDAMTREF2) END AS CONVCOSTREF2,
      C_CURRENCY_CONVERT(SUM(LINENETREF3), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNTREF3, 
      CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(COSTREF3) WHEN SUM(COSTEDAMTREF3) = 0 THEN 0 ELSE SUM(COSTREF3)*SUM(LINENETREF3)/SUM(COSTEDAMTREF3) END AS CONVCOSTREF3,
      TRCURRENCYID, TRDATE, TRCLIENTID, TRORGID, SUM(AA.COSTCALCULATED) as COSTCALCULATED,
      C_CURRENCY_CONVERT(SUM(COSTEDAMT), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamt,
      C_CURRENCY_CONVERT(SUM(COSTEDAMTREF), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamtref,
      C_CURRENCY_CONVERT(SUM(COSTEDAMTREF2), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamtref2,
      C_CURRENCY_CONVERT(SUM(COSTEDAMTREF3), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamtref3,
      COUNT(*) AS GROUPCOUNT
      FROM (SELECT to_char('1') AS NIVEL1, to_char('2') AS NIVEL2, to_char('3') AS NIVEL3, to_char('4') AS NIVEL4, to_char('5') AS NIVEL5, to_char('6') AS NIVEL6, to_char('7') AS NIVEL7, to_char('16') AS NIVEL8, to_char('18') AS NIVEL9, to_char('20') AS NIVEL10,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.LINENETAMT *- 1 ELSE c_invoiceline.LINENETAMT END AS LINENETAMT,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICED,
      C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT, 
      0 AS LINENETREF, 0 AS QTYINVOICEDREF, 0 AS WEIGHT_REF,
      0 AS LINENETREF2, 0 AS QTYINVOICEDREF2, 0 AS WEIGHT_REF2, 
      0 AS LINENETREF3, 0 AS QTYINVOICEDREF3, 0 AS WEIGHT_REF3, 
      C_UOM.UOMSYMBOL,
      C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,  
      TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,      
      C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,      
      C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                CASE WHEN (M_PRODUCT.ISSTOCKED='Y' AND M_PRODUCT.PRODUCTTYPE='I') THEN (CASE WHEN trx.movementqty = 0 THEN 0 ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION (ROUND(sum(trxcost.cost)/abs(trx.movementqty)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END), C_GET_CURRENCY_PRECISION(trxcost.c_currency_id, 'C')), trxcost.c_currency_id,?,trx.movementdate,NULL,trx.ad_client_id,trx.ad_org_id,'C'), 0) END)
                     ELSE (COALESCE(M_GET_NO_TRX_PRODUCT_COST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, 'STA', ad_org.ad_org_id, null, C_INVOICE.C_CURRENCY_ID), 0)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END))
                END AS COST,
                0 AS COSTREF,
                0 AS COSTREF2,
                0 AS COSTREF3,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMT, 
                0 AS COSTEDAMTREF, 
                0 AS COSTEDAMTREF2,
                0 AS COSTEDAMTREF3
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join m_transaction_cost trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
      AND C_INVOICE.PROCESSED = 'Y'
      AND 0=0 AND C_INVOICE.AD_ORG_ID IN ('1')
      AND C_INVOICE.AD_CLIENT_ID IN ('7')
      AND ((trxcost.m_transaction_cost_id is not null and trxcost.isunitcost = 'Y') or (trxcost.m_transaction_cost_id is null))
      AND 1=1
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE
      UNION ALL SELECT to_char('8') AS NIVEL1 , to_char('9') AS NIVEL2 , to_char('10') AS NIVEL3 , to_char('11') AS NIVEL4 , to_char('12') AS NIVEL5 , to_char('13') AS NIVEL6 , to_char('14') AS NIVEL7 , to_char('17') AS NIVEL8 , to_char('19') AS NIVEL9 , to_char('21') AS NIVEL10,
      0 AS LINENETAMT, 0 AS QTYINVOICED, 0 AS WEIGHT, 
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.LINENETAMT *- 1 ELSE c_invoiceline.LINENETAMT END AS LINENETREF,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICEDREF,
      C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT_REF,
      0 AS LINENETREF2, 0 AS QTYINVOICEDREF2, 0 AS WEIGHT_REF2,
      0 AS LINENETREF3, 0 AS QTYINVOICEDREF3, 0 AS WEIGHT_REF3,
      C_UOM.UOMSYMBOL,
      C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,
      TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,
      C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,
      C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                0 AS COST,
                CASE WHEN (M_PRODUCT.ISSTOCKED='Y' AND M_PRODUCT.PRODUCTTYPE='I') THEN (CASE WHEN trx.movementqty = 0 THEN 0 ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION (ROUND(sum(trxcost.cost)/abs(trx.movementqty)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END), C_GET_CURRENCY_PRECISION(trxcost.c_currency_id, 'C')), trxcost.c_currency_id,?,trx.movementdate,NULL,trx.ad_client_id,trx.ad_org_id,'C'), 0) END)
                     ELSE (COALESCE(M_GET_NO_TRX_PRODUCT_COST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, 'STA', ad_org.ad_org_id, null, C_INVOICE.C_CURRENCY_ID), 0)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END))
                END AS COSTREF,
                0 AS COSTREF2,
                0 AS COSTREF3,
                0 AS COSTEDAMT,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMTREF,
                0 AS COSTEDAMTREF2,
                0 AS COSTEDAMTREF3
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join m_transaction_cost trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
      AND C_INVOICE.PROCESSED = 'Y'
      AND 3=3 AND C_INVOICE.AD_ORG_ID IN ('1')
      AND C_INVOICE.AD_CLIENT_ID IN('14')
      AND ((trxcost.m_transaction_cost_id is not null and trxcost.isunitcost = 'Y') or (trxcost.m_transaction_cost_id is null))
      AND 2=2
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE
      UNION ALL SELECT  to_char('28') AS NIVEL1 ,to_char('29') AS NIVEL2 ,to_char('30') AS NIVEL3 ,to_char('31') AS NIVEL4 ,to_char('32') AS NIVEL5 ,to_char('33') AS NIVEL6 ,to_char('34') AS NIVEL7 ,to_char('35') AS NIVEL8 ,to_char('36') AS NIVEL9 ,to_char('37') AS NIVEL10,
      0 AS LINENETAMT, 0 AS QTYINVOICED, 0 AS WEIGHT, 
      0 AS LINENETREF, 0 AS QTYINVOICEDREF, 0 AS WEIGHT_REF,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.LINENETAMT *- 1 ELSE c_invoiceline.LINENETAMT END AS LINENETREF2,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICEDREF2,
      C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT_REF2,
      0 AS LINENETREF3, 0 AS QTYINVOICEDREF3, 0 AS WEIGHT_REF3,
      C_UOM.UOMSYMBOL,
      C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,
      TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,
      C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,
      C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                0 AS COST,
                0 AS COSTREF,
                CASE WHEN (M_PRODUCT.ISSTOCKED='Y' AND M_PRODUCT.PRODUCTTYPE='I') THEN (CASE WHEN trx.movementqty = 0 THEN 0 ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION (ROUND(sum(trxcost.cost)/abs(trx.movementqty)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END), C_GET_CURRENCY_PRECISION(trxcost.c_currency_id, 'C')), trxcost.c_currency_id,?,trx.movementdate,NULL,trx.ad_client_id,trx.ad_org_id,'C'), 0) END)
                     ELSE (COALESCE(M_GET_NO_TRX_PRODUCT_COST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, 'STA', ad_org.ad_org_id, null, C_INVOICE.C_CURRENCY_ID), 0)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END))
                END AS COSTREF2, 
                0 AS COSTREF3,               
                0 AS COSTEDAMT,
                0 AS COSTEDAMTREF,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMTREF2,
                0 AS COSTEDAMTREF3                
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join m_transaction_cost trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
      AND C_INVOICE.PROCESSED = 'Y'
      AND 5=5 AND C_INVOICE.AD_ORG_ID IN ('1')
      AND C_INVOICE.AD_CLIENT_ID  IN('38')
      AND ((trxcost.m_transaction_cost_id is not null and trxcost.isunitcost = 'Y') or (trxcost.m_transaction_cost_id is null))
      AND 4=4
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE
      UNION ALL  SELECT  to_char('39') AS NIVEL1  ,to_char('40') AS NIVEL2  ,to_char('41') AS NIVEL3  ,to_char('42') AS NIVEL4  ,to_char('43') AS NIVEL5  ,to_char('44') AS NIVEL6  ,to_char('45') AS NIVEL7  ,to_char('46') AS NIVEL8  ,to_char('47') AS NIVEL9  ,to_char('48') AS NIVEL10,
      0 AS LINENETAMT, 0 AS QTYINVOICED, 0 AS WEIGHT, 
      0 AS LINENETREF, 0 AS QTYINVOICEDREF, 0 AS WEIGHT_REF,
      0 AS LINENETREF2, 0 AS QTYINVOICEDREF2, 0 AS WEIGHT_REF2,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.LINENETAMT *- 1 ELSE c_invoiceline.LINENETAMT END AS LINENETREF3,
      CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICEDREF3,
      C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT_REF3,
      C_UOM.UOMSYMBOL,
      C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,
      TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,
      C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,
      C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                0 AS COST,
                0 AS COSTREF,
                0 AS COSTREF2,
                CASE WHEN (M_PRODUCT.ISSTOCKED='Y' AND M_PRODUCT.PRODUCTTYPE='I') THEN (CASE WHEN trx.movementqty = 0 THEN 0 ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION (ROUND(sum(trxcost.cost)/abs(trx.movementqty)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END), C_GET_CURRENCY_PRECISION(trxcost.c_currency_id, 'C')), trxcost.c_currency_id,?,trx.movementdate,NULL,trx.ad_client_id,trx.ad_org_id,'C'), 0) END)
                     ELSE (COALESCE(M_GET_NO_TRX_PRODUCT_COST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, 'STA', ad_org.ad_org_id, null, C_INVOICE.C_CURRENCY_ID), 0)*(CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END))
                END AS COSTREF3,                
                0 AS COSTEDAMT,
                0 AS COSTEDAMTREF,
                0 AS COSTEDAMTREF2,
                CASE WHEN sum(trxcost.cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMTREF3                
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join m_transaction_cost trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
      AND C_INVOICE.PROCESSED = 'Y'
      AND 7=7 AND C_INVOICE.AD_ORG_ID IN ('1')
      AND  C_INVOICE.AD_CLIENT_ID  IN('49')
      AND ((trxcost.m_transaction_cost_id is not null and trxcost.isunitcost = 'Y') or (trxcost.m_transaction_cost_id is null))
      AND 6=6
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE
      ORDER BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10) AA
      GROUP BY  NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, TRCURRENCYID, TRDATE, TRCLIENTID, TRORGID) ZZ
      GROUP BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 1
      ) B
     ]]></Sql>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/> 
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>      
    <Parameter name="nivel1" type="replace" optional="true" after="FROM (SELECT to_char(" text="'1'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1, to_char(" text="'2'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2, to_char(" text="'3'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3, to_char(" text="'4'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4, to_char(" text="'5'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5, to_char(" text="'6'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6, to_char(" text="'7'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7, to_char(" text="'16'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8, to_char(" text="'18'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9, to_char(" text="'20'"/>
    <Parameter name="cCurrencyConv"/> 
    <Parameter name="adOrgId" optional="true" type="replace" after="AND 0=0 AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID IN (" text="'7'"/>
    <Parameter name="dateFrom" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateTo" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 1=1"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 1=1"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 1=1"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 1=1"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="nivel1" type="replace" optional="true" after="UNION ALL SELECT to_char(" text="'8'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1 , to_char(" text="'9'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2 , to_char(" text="'10'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3 , to_char(" text="'11'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4 , to_char(" text="'12'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5 , to_char(" text="'13'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6 , to_char(" text="'14'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7 , to_char(" text="'17'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8 , to_char(" text="'19'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9 , to_char(" text="'21'"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND 3=3 AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID IN(" text="'14'"/>
    <Parameter name="dateFromRef" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateToRef" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 2=2"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 2=2"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 2=2"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 2=2"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 2=2"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 2=2"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="nivel1" type="replace" optional="true" after="UNION ALL SELECT  to_char(" text="'28'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1 ,to_char(" text="'29'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2 ,to_char(" text="'30'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3 ,to_char(" text="'31'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4 ,to_char(" text="'32'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5 ,to_char(" text="'33'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6 ,to_char(" text="'34'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7 ,to_char(" text="'35'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8 ,to_char(" text="'36'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9 ,to_char(" text="'37'"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND 5=5 AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID  IN(" text="'38'"/>
    <Parameter name="dateFromRef2" optional="true" after="AND 4=4"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateToRef2" optional="true" after="AND 4=4"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 4=4"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 4=4"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 4=4"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 4=4"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 4=4"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 4=4"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 4=4"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 4=4"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 4=4"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 4=4"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="nivel1" type="replace" optional="true" after="UNION ALL  SELECT  to_char(" text="'39'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1  ,to_char(" text="'40'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2  ,to_char(" text="'41'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3  ,to_char(" text="'42'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4  ,to_char(" text="'43'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5  ,to_char(" text="'44'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6  ,to_char(" text="'45'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7  ,to_char(" text="'46'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8  ,to_char(" text="'47'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9  ,to_char(" text="'48'"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND 7=7 AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND  C_INVOICE.AD_CLIENT_ID  IN(" text="'49'"/>
    <Parameter name="dateFromRef3" optional="true" after="AND 6=6"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateToRef3" optional="true" after="AND 6=6"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 6=6"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 6=6"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 6=6"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 6=6"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 6=6"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 6=6"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 6=6"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 6=6"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 6=6"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 6=6"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="orderby" type="replace" optional="true" after="GROUP BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10" text=", 1"/>
    <Parameter name="pgLimit" type="argument" optional="true" after=") B"><![CDATA[LIMIT ]]></Parameter>
    <Parameter name="oraLimit1" type="argument" optional="true" after=") B"><![CDATA[WHERE ROWNUM <= ]]></Parameter>
  </SqlMethod>

  <SqlMethod name="selectNoComparative" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
    SELECT B.* FROM (
    SELECT NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10,
        SUM(AMOUNT) AS AMOUNT, SUM(QTY) AS QTY, SUM(WEIGHT) AS WEIGHT, SUM(COST) AS COST, 
        SUM(AMOUNTREF) AS AMOUNTREF, SUM(QTYREF) AS QTYREF, SUM(WEIGHTREF) AS WEIGHTREF,
        SUM(CONVAMOUNT) AS CONVAMOUNT,  
        CASE WHEN SUM(COSTCALCULATED) = 0 THEN SUM(CONVCOST) WHEN SUM(GROUPCOUNT) <> SUM(COSTCALCULATED) THEN SUM(CONVCOST) WHEN SUM(COSTEDAMT) = 0 AND SUM(CONVCOST) > 0 THEN SUM(CONVCOST) WHEN SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNT END) = 0 THEN SUM(CONVCOST) ELSE SUM(CONVCOST) * SUM(CONVAMOUNT) / SUM(CASE WHEN GROUPCOUNT = COSTCALCULATED THEN 0 ELSE CONVAMOUNT END) END AS CONVCOST,
        SUM(CONVAMOUNTREF) AS CONVAMOUNTREF,
        SUM(CONVCOSTREF) AS CONVCOSTREF,           
        C_CURRENCY_SYMBOL(?, 0, 'Y') AS CONVSYM,                
        C_CURRENCY_ISOSYM(?) AS CONVISOSYM, SUM(ZZ.COSTCALCULATED) AS COSTCALCULATED
    FROM (SELECT NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 
      SUM(LINENETAMT) AS AMOUNT, SUM(QTYINVOICED) AS QTY, SUM(WEIGHT) AS WEIGHT, SUM(COST) AS COST,
      SUM(LINENETREF) AS AMOUNTREF, SUM(QTYINVOICEDREF) AS QTYREF, SUM(WEIGHT_REF) AS WEIGHTREF,
      C_CURRENCY_CONVERT(SUM(LINENETAMT), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS CONVAMOUNT,
      CASE WHEN SUM(COSTCALCULATED) >= 0 THEN SUM(COST)  WHEN SUM(COSTEDAMT) = 0 AND SUM(COST) > 0 THEN SUM(COST) ELSE SUM(COST) * SUM(LINENETAMT) / SUM(COSTEDAMT) END AS CONVCOST,
          0 AS CONVAMOUNTREF,
          0 AS CONVCOSTREF,
      TRCURRENCYID, TRDATE, TRCLIENTID, TRORGID, SUM(AA.COSTCALCULATED) as COSTCALCULATED,
      C_CURRENCY_CONVERT(SUM(COSTEDAMT), TRCURRENCYID, ?, TO_DATE(TRDATE), NULL, TRCLIENTID, TRORGID) AS costedamt,
      COUNT(*) AS GROUPCOUNT
      FROM (SELECT to_char('1') AS NIVEL1, to_char('2') AS NIVEL2, to_char('3') AS NIVEL3, to_char('4') AS NIVEL4, to_char('5') AS NIVEL5, to_char('6') AS NIVEL6, to_char('7') AS NIVEL7, to_char('9') AS NIVEL8, to_char('10') AS NIVEL9, to_char('11') AS NIVEL10,
                CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END AS LINENETAMT,
                CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTYINVOICED,
                C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT,
                0 AS LINENETREF, 0 AS QTYINVOICEDREF, 0 AS WEIGHT_REF, C_UOM.UOMSYMBOL,
                C_INVOICE.C_CURRENCY_ID AS TRCURRENCYID,  
                TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS TRDATE,      
                C_INVOICELINE.AD_CLIENT_ID AS TRCLIENTID,      
                C_INVOICELINE.AD_ORG_ID AS TRORGID,
                CASE WHEN sum(trxcost.total_cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 1 ELSE 0
                END AS COSTCALCULATED,
                CASE WHEN M_PRODUCT.ISSTOCKED = 'Y' AND M_PRODUCT.PRODUCTTYPE = 'I' THEN CASE WHEN C_INVOICELINE.M_INOUTLINE_ID IS NULL THEN COALESCE( M_GET_NO_TRX_PRD_COST_LATEST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, AD_ORG.AD_ORG_ID, NULL, C_INVOICE.C_CURRENCY_ID, 'N'),0) * ( CASE WHEN C_DOCTYPE.DOCBASETYPE = 'ARC' THEN C_INVOICELINE.QTYINVOICED * -1 ELSE C_INVOICELINE.QTYINVOICED END) WHEN TRX.MOVEMENTQTY = 0 THEN 0 ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE = 'ARC' THEN -1 * COALESCE(C_CURRENCY_CONVERT_PRECISION(ROUND(MAX(trxcost.total_cost), C_GET_CURRENCY_PRECISION(MAX(trxcost.c_currency_id), 'C')), MAX(trxcost.c_currency_id), ?, TRX.MOVEMENTDATE, NULL, TRX.AD_CLIENT_ID, TRX.AD_ORG_ID, 'C'), 0) ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION(ROUND(MAX(trxcost.total_cost), C_GET_CURRENCY_PRECISION(MAX(trxcost.c_currency_id), 'C')), MAX(trxcost.c_currency_id), ?, TRX.MOVEMENTDATE, NULL, TRX.AD_CLIENT_ID, TRX.AD_ORG_ID, 'C'), 0) END END ELSE COALESCE( M_GET_NO_TRX_PRD_COST_LATEST( M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, AD_ORG.AD_ORG_ID, NULL, C_INVOICE.C_CURRENCY_ID, 'N'),0) * ( CASE WHEN C_DOCTYPE.DOCBASETYPE = 'ARC' THEN C_INVOICELINE.QTYINVOICED * -1 ELSE C_INVOICELINE.QTYINVOICED END ) END AS COST,
                CASE WHEN sum(trxcost.total_cost) is null AND m_product.isstocked = 'Y' AND m_product.producttype = 'I' THEN 0
                     ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE='ARC' THEN C_INVOICELINE.LINENETAMT*-1 ELSE C_INVOICELINE.LINENETAMT END
                END AS COSTEDAMT
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join (SELECT m_transaction_id, SUM(cost) AS total_cost, MAX(c_currency_id) AS c_currency_id FROM m_transaction_cost GROUP BY m_transaction_id) trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
      WHERE C_INVOICE.ISSOTRX = 'Y'
        AND C_INVOICE.PROCESSED = 'Y'
        AND C_INVOICE.AD_ORG_ID IN ('1')
        AND C_INVOICE.AD_CLIENT_ID IN ('7')
        AND 1=1
      GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, AD_USER.AD_USER_ID, C_PROJECT.NAME, AD_USER.FIRSTNAME, AD_USER.LASTNAME, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE, C_INVOICELINE.M_INOUTLINE_ID
      ORDER BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10) AA
      GROUP BY  NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, TRCURRENCYID, TRDATE, TRCLIENTID, TRORGID) ZZ
      GROUP BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10, 1
      ) B
     ]]></Sql>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>    
    <Parameter name="nivel1" type="replace" optional="true" after="FROM (SELECT to_char(" text="'1'"/>
    <Parameter name="nivel2" type="replace" optional="true" after="AS NIVEL1, to_char(" text="'2'"/>
    <Parameter name="nivel3" type="replace" optional="true" after="AS NIVEL2, to_char(" text="'3'"/>
    <Parameter name="nivel4" type="replace" optional="true" after="AS NIVEL3, to_char(" text="'4'"/>
    <Parameter name="nivel5" type="replace" optional="true" after="AS NIVEL4, to_char(" text="'5'"/>
    <Parameter name="nivel6" type="replace" optional="true" after="AS NIVEL5, to_char(" text="'6'"/>
    <Parameter name="nivel7" type="replace" optional="true" after="AS NIVEL6, to_char(" text="'7'"/>
    <Parameter name="nivel8" type="replace" optional="true" after="AS NIVEL7, to_char(" text="'9'"/>
    <Parameter name="nivel9" type="replace" optional="true" after="AS NIVEL8, to_char(" text="'10'"/>
    <Parameter name="nivel10" type="replace" optional="true" after="AS NIVEL9, to_char(" text="'11'"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID IN (" text="'7'"/>
    <Parameter name="dateFrom" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateTo" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 1=1"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 1=1"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 1=1"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 1=1"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="orderby" type="replace" optional="true" after="GROUP BY NIVEL1, NIVEL2, NIVEL3, NIVEL4, NIVEL5, NIVEL6, NIVEL7, NIVEL8, NIVEL9, NIVEL10" text=", 1"/>
    <Parameter name="pgLimit" type="argument" optional="true" after=") B"><![CDATA[LIMIT ]]></Parameter>
    <Parameter name="oraLimit1" type="argument" optional="true" after=") B"><![CDATA[WHERE ROWNUM <= ]]></Parameter>
  </SqlMethod>

  <SqlMethod name="selectProject" type="preparedStatement" return="String" default="">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT C_PROJECT.NAME
      FROM C_PROJECT
      WHERE C_PROJECT_ID = ?
     ]]></Sql>
     <Parameter name="cProjectId"/>
  </SqlMethod>

  <SqlMethod name="selectBpgroup" type="preparedStatement" return="String" default="">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT C_BP_GROUP.NAME
      FROM C_BP_GROUP
      WHERE C_BP_GROUP.C_BP_GROUP_ID = ?
     ]]></Sql>
    <Parameter name="cBpGroupId"/>
  </SqlMethod>

  <SqlMethod name="selectProductCategory" type="preparedStatement" return="String" default="">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT M_PRODUCT_CATEGORY.NAME
      FROM M_PRODUCT_CATEGORY
      WHERE M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID = ?
     ]]></Sql>
    <Parameter name="mProductCategoryId"/>
  </SqlMethod>

  <SqlMethod name="selectSalesrep" type="preparedStatement" return="String" default="">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT AD_USER.FIRSTNAME||' '||AD_USER.LASTNAME
      FROM AD_USER
      WHERE AD_USER.AD_USER_ID = ?
     ]]></Sql>
    <Parameter name="mWarehouseId"/>
  </SqlMethod>

  <SqlMethod name="selectProducttype" type="preparedStatement" return="String" default="">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT ad_ref_list_trl.NAME FROM ad_ref_list, ad_ref_list_trl 
      WHERE ad_ref_list.AD_REF_LIST_ID = ad_ref_list_trl.AD_REF_LIST_ID
      AND ad_ref_list.ad_reference_id = ?
      AND ad_ref_list_trl.ad_language = ?
      AND ad_ref_list.VALUE = ?
     ]]></Sql>
    <Parameter name="adReferenceId"/>
    <Parameter name="adLanguage"/>
    <Parameter name="value"/>
  </SqlMethod>

  <SqlMethod name="selectNotShown" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT ID, NAME
      FROM (SELECT VALUE AS ID, NAME 
              FROM AD_REF_LIST 
             WHERE AD_REFERENCE_ID = '800087'
             AND AD_REF_LIST.VALUE IN ('1', '2', '3', '4', '5', '6', '8', '9', '10', '11')
             ORDER BY TO_NUMBER(VALUE)) AA
      WHERE 1=1 
     ]]></Sql>
     <Parameter name="notShown" optional="true" type="argument" after="WHERE 1=1 "><![CDATA[AND ID NOT IN]]></Parameter>
  </SqlMethod>
  <SqlMethod name="selectShown" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT ID, NAME
      FROM (SELECT VALUE AS ID, NAME 
              FROM AD_REF_LIST 
             WHERE AD_REFERENCE_ID = '800087' 
             AND AD_REF_LIST.VALUE IN ('1', '2', '3', '4', '5', '6', '8', '9', '10', '11')
             ORDER BY TO_NUMBER(VALUE)) AA
      WHERE 1=1 
     ]]></Sql>
     <Parameter name="shown" optional="true" type="argument" after="WHERE 1=1 "><![CDATA[AND ID IN]]></Parameter>
  </SqlMethod>

  <SqlMethod name="selectNotShownTrl" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT ID, NAME
      FROM (SELECT VALUE AS ID, T.NAME 
              FROM AD_REF_LIST_trl T,
                   AD_REF_LIST     L
             WHERE l.AD_REFERENCE_ID = '800087'
             AND L.VALUE IN ('1', '2', '3', '4', '5', '6', '8', '9', '10', '11')
               AND l.AD_REF_LIST_ID  = t.AD_REF_LIST_ID
               AND t.AD_LANGUAGE = ?
             ORDER BY TO_NUMBER(VALUE)) AA
      WHERE 1=1 
     ]]></Sql>
     <Parameter name="lang"/> 
     <Parameter name="notShown" optional="true" type="argument" after="WHERE 1=1 "><![CDATA[AND ID NOT IN]]></Parameter>
  </SqlMethod>
  <SqlMethod name="selectShownTrl" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT ID, NAME
      FROM (SELECT VALUE AS ID, T.NAME 
              FROM AD_REF_LIST_trl T,
                   AD_REF_LIST     L
             WHERE l.AD_REFERENCE_ID = '800087'
               AND l.AD_REF_LIST_ID  = t.AD_REF_LIST_ID
               AND L.VALUE IN ('1', '2', '3', '4', '5', '6', '8', '9', '10', '11')
               AND t.AD_LANGUAGE = ?
             ORDER BY TO_NUMBER(VALUE)) AA
      WHERE 1=1 
     ]]></Sql>
     <Parameter name="lang"/> 
     <Parameter name="shown" optional="true" type="argument" after="WHERE 1=1 "><![CDATA[AND ID IN]]></Parameter>
  </SqlMethod>
  
  <SqlMethod name="selectXLS" type="preparedStatement" return="multiple">
    <SqlMethodComment></SqlMethodComment>
    <Sql>
    <![CDATA[
      SELECT B.* FROM (
      SELECT ORG, DOCTYPENAME, PARTNERGROUP, PARTNER, DOCUMENTNO, INVOICEDATE, PRODCATEGORY, PRODUCT, SEARCHKEY, UNITPRICE, 
        AMOUNT, COST, (AMOUNT - COST) AS PROFIT, CASE WHEN AMOUNT <> 0 THEN ROUND((100 * ABS((AMOUNT - COST) / AMOUNT)), 2) * SIGN(AMOUNT - COST) ELSE 0 END AS MARGIN, 
        WEIGHT, QTY, CONTACT, SALESREP, PROJECT, ADDRESS
        FROM (
          SELECT AD_ORG.NAME AS ORG, 
            COALESCE(C_DOCTYPE_TRL.NAME, C_DOCTYPE.NAME) AS DOCTYPENAME,
            C_BP_GROUP.NAME AS PARTNERGROUP, 
            C_BPARTNER.NAME AS PARTNER, 
            C_INVOICE.DOCUMENTNO AS DOCUMENTNO, 
            TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())) AS INVOICEDATE, 
            M_PRODUCT_CATEGORY.NAME AS PRODCATEGORY, 
            M_PRODUCT.NAME AS PRODUCT, 
            M_PRODUCT.VALUE AS SEARCHKEY, 
            C_CURRENCY_CONVERT(CASE WHEN C_INVOICELINE.QTYINVOICED = 0 THEN 0 ELSE C_INVOICELINE.LINENETAMT/C_INVOICELINE.QTYINVOICED END, C_INVOICE.C_CURRENCY_ID, ?, TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())), NULL, C_INVOICE.AD_CLIENT_ID, C_INVOICE.AD_ORG_ID) AS UNITPRICE,
            CASE WHEN C_DOCTYPE.DOCBASETYPE = 'ARC' THEN C_CURRENCY_CONVERT(C_INVOICELINE.LINENETAMT*-1, C_INVOICE.C_CURRENCY_ID, ?, TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())), NULL, C_INVOICE.AD_CLIENT_ID, C_INVOICE.AD_ORG_ID) ELSE C_CURRENCY_CONVERT(C_INVOICELINE.LINENETAMT, C_INVOICE.C_CURRENCY_ID, ?, TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, NOW())), NULL, C_INVOICE.AD_CLIENT_ID, C_INVOICE.AD_ORG_ID) END AS AMOUNT,
            CASE WHEN M_PRODUCT.ISSTOCKED = 'Y' AND M_PRODUCT.PRODUCTTYPE = 'I' THEN CASE WHEN C_INVOICELINE.M_INOUTLINE_ID IS NULL THEN COALESCE( M_GET_NO_TRX_PRD_COST_LATEST(M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, AD_ORG.AD_ORG_ID, NULL, C_INVOICE.C_CURRENCY_ID, 'N'),0) * ( CASE WHEN C_DOCTYPE.DOCBASETYPE = 'ARC' THEN C_INVOICELINE.QTYINVOICED * -1 ELSE C_INVOICELINE.QTYINVOICED END) WHEN TRX.MOVEMENTQTY = 0 THEN 0 ELSE CASE WHEN C_DOCTYPE.DOCBASETYPE = 'ARC' THEN -1 * COALESCE(C_CURRENCY_CONVERT_PRECISION(ROUND(MAX(trxcost.total_cost), C_GET_CURRENCY_PRECISION(MAX(trxcost.c_currency_id), 'C')), MAX(trxcost.c_currency_id), ?, TRX.MOVEMENTDATE, NULL, TRX.AD_CLIENT_ID, TRX.AD_ORG_ID, 'C'), 0) ELSE COALESCE(C_CURRENCY_CONVERT_PRECISION(ROUND(MAX(trxcost.total_cost), C_GET_CURRENCY_PRECISION(MAX(trxcost.c_currency_id), 'C')), MAX(trxcost.c_currency_id), ?, TRX.MOVEMENTDATE, NULL, TRX.AD_CLIENT_ID, TRX.AD_ORG_ID, 'C'), 0) END END ELSE COALESCE( M_GET_NO_TRX_PRD_COST_LATEST( M_PRODUCT.M_PRODUCT_ID, C_INVOICE.DATEINVOICED, AD_ORG.AD_ORG_ID, NULL, C_INVOICE.C_CURRENCY_ID, 'N'),0) * ( CASE WHEN C_DOCTYPE.DOCBASETYPE = 'ARC' THEN C_INVOICELINE.QTYINVOICED * -1 ELSE C_INVOICELINE.QTYINVOICED END ) END AS COST,
            C_INVOICELINE.QTYINVOICED*M_PRODUCT.WEIGHT AS WEIGHT,
            CASE WHEN c_doctype.docbasetype = 'ARC' THEN c_invoiceline.qtyinvoiced *- 1 ELSE c_invoiceline.qtyinvoiced END AS QTY,
            (SELECT U.NAME FROM AD_USER U WHERE U.AD_USER_ID = C_INVOICE.AD_USER_ID) AS CONTACT,
            (SELECT SR.NAME FROM AD_USER SR WHERE SR.AD_USER_ID = C_INVOICE.SALESREP_ID) AS SALESREP,
            (SELECT P.NAME FROM C_PROJECT P WHERE P.C_PROJECT_ID = C_INVOICE.C_PROJECT_ID) AS PROJECT,
            (SELECT PL.NAME FROM C_BPARTNER_LOCATION PL WHERE PL.C_BPARTNER_LOCATION_ID = M_INOUT.C_BPARTNER_LOCATION_ID) AS ADDRESS
            FROM C_INVOICELINE 
                join C_INVOICE on C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
                join C_BPARTNER on C_INVOICE.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID
                join C_BP_GROUP on C_BPARTNER.C_BP_GROUP_ID = C_BP_GROUP.C_BP_GROUP_ID
                join AD_ORG on C_INVOICE.AD_ORG_ID = AD_ORG.AD_ORG_ID
                left join C_BPARTNER CB on C_BPARTNER.SALESREP_ID = CB.C_BPARTNER_ID
                left join AD_USER on C_INVOICE.SALESREP_ID = AD_USER.AD_USER_ID
                left join C_PROJECT on C_INVOICE.C_PROJECT_ID = C_PROJECT.C_PROJECT_ID
                left join C_DOCTYPE on C_INVOICE.C_DOCTYPE_ID=C_DOCTYPE.C_DOCTYPE_ID
                left join C_DOCTYPE_TRL on C_DOCTYPE.C_DOCTYPE_ID = C_DOCTYPE_TRL.C_DOCTYPE_ID AND C_DOCTYPE_TRL.AD_LANGUAGE=?
                left join M_PRODUCT on C_INVOICELINE.M_PRODUCT_ID = M_PRODUCT.M_PRODUCT_ID
                left join C_UOM on C_INVOICELINE.C_UOM_ID = C_UOM.C_UOM_ID
                left join M_PRODUCT_CATEGORY on M_PRODUCT.M_PRODUCT_CATEGORY_ID = M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID
                left join M_INOUTLINE on C_INVOICELINE.M_INOUTLINE_ID = M_INOUTLINE.M_INOUTLINE_ID
                left join M_INOUT ON M_INOUTLINE.M_INOUT_ID = M_INOUT.M_INOUT_ID
                left join m_transaction trx ON trx.m_inoutline_id = m_inoutline.m_inoutline_id
                left join (SELECT m_transaction_id, SUM(cost) AS total_cost, MAX(c_currency_id) AS c_currency_id FROM m_transaction_cost GROUP BY m_transaction_id) trxcost ON trx.m_transaction_id = trxcost.m_transaction_id
          WHERE C_INVOICE.ISSOTRX = 'Y'
            AND C_INVOICE.PROCESSED = 'Y'
            AND C_INVOICE.AD_ORG_ID IN ('1')
            AND C_INVOICE.AD_CLIENT_ID IN ('7')
            AND 1=1
          AND 1=1
          GROUP BY trxcost.m_transaction_id, C_INVOICELINE.C_INVOICELINE_ID, C_DOCTYPE_TRL.NAME, C_DOCTYPE.NAME, C_BPARTNER.NAME, C_BPARTNER.C_BPARTNER_ID, M_PRODUCT_CATEGORY.NAME, M_PRODUCT.NAME, M_PRODUCT.VALUE, C_INVOICE.DOCUMENTNO, AD_ORG.NAME, C_INVOICE.AD_USER_ID, C_INVOICE.SALESREP_ID, C_INVOICE.C_PROJECT_ID, C_BP_GROUP.NAME, M_INOUT.C_BPARTNER_LOCATION_ID, C_INVOICE.AD_CLIENT_ID, C_INVOICE.AD_ORG_ID, C_INVOICELINE.LINENETAMT, C_INVOICELINE.QTYINVOICED, C_UOM.UOMSYMBOL, c_doctype.docbasetype, ad_org.ad_org_id, C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, trx.movementqty, trx.movementdate, trx.ad_client_id, trx.ad_org_id, trxcost.c_currency_id, M_PRODUCT.WEIGHT, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.ISSTOCKED, M_PRODUCT.PRODUCTTYPE, C_INVOICELINE.M_INOUTLINE_ID, C_INVOICE.DATEINVOICED, C_INVOICE.C_INVOICE_ID, M_INOUTLINE.M_INOUTLINE_ID, M_PRODUCT.M_PRODUCT_ID,C_INVOICE.C_CURRENCY_ID,C_INVOICE.DATEINVOICED,AD_ORG.AD_ORG_ID) AA
          ORDER BY ORG, DOCUMENTNO, INVOICEDATE
          ) B
     ]]></Sql>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="cCurrencyConv"/>
    <Parameter name="language"/>
    <Parameter name="adOrgId" optional="true" type="replace" after="AND C_INVOICE.AD_ORG_ID IN (" text="'1'"/>
    <Parameter name="adUserClient" type="replace" optional="true" after="AND C_INVOICE.AD_CLIENT_ID IN (" text="'7'"/>
    <Parameter name="dateFrom" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED >= to_date(?)]]></Parameter>
    <Parameter name="dateTo" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DATEINVOICED < to_date(?)]]></Parameter>
    <Parameter name="cBpartnerGroupId" optional="true" after="AND 1=1"><![CDATA[AND C_BP_GROUP.C_BP_GROUP_ID = ?]]></Parameter>
    <Parameter name="cBpartnerId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_BPARTNER.C_BPARTNER_ID IN]]></Parameter>
    <Parameter name="mProductCategoryId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT_CATEGORY.M_PRODUCT_CATEGORY_ID IN]]></Parameter>
    <Parameter name="mProductId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND M_PRODUCT.M_PRODUCT_ID IN]]></Parameter>
    <Parameter name="salesrepId" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.SALESREP_ID = ?]]></Parameter>
    <Parameter name="partnerSalesrepId" optional="true" after="AND 1=1"><![CDATA[AND CB.C_BPARTNER_ID = ?]]></Parameter>
    <Parameter name="cProjectId" optional="true" after="AND 1=1"><![CDATA[AND C_PROJECT.C_PROJECT_ID = ?]]></Parameter>
    <Parameter name="producttype" optional="true" after="AND 1=1"><![CDATA[AND M_PRODUCT.PRODUCTTYPE = ?]]></Parameter>
    <Parameter name="cDocTypeId" optional="true" type="argument" after="AND 1=1"><![CDATA[AND C_DOCTYPE.C_DOCTYPE_ID IN]]></Parameter>
    <Parameter name="strvoid" optional="true" after="AND 1=1"><![CDATA[AND C_INVOICE.DOCSTATUS <> ?]]></Parameter>
    <Parameter name="pgLimit" type="argument" optional="true" after=") B"><![CDATA[LIMIT ]]></Parameter>
    <Parameter name="oraLimit1" type="argument" optional="true" after=") B"><![CDATA[WHERE ROWNUM <= ]]></Parameter>
  </SqlMethod>
</SqlClass>
