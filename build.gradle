plugins {
    id 'java'
    id 'maven-publish'
    id "org.sonarqube" version "2.6"
    id 'war'
    id 'idea'
    id 'groovy'
    id "me.champeau.jmh" version "0.6.5"
    id 'com.etendoerp.gradleplugin' version 'latest.release'
    id 'org.kordamp.gradle.jandex' version '0.11.0'
}
compileJava.options.encoding = "UTF-8"
apply from: 'tests.gradle'
apply from: "artifacts.list.COMPILATION.gradle"

repositories {
    gradlePluginPortal()
    mavenCentral()
}

/**
 * Jandex is used to index the .class files containing annotations.
 * This generates a file called 'jandex.inx', and is stored in the 'META-INF' dir of the core jar.
 * Weld uses this file to scan all the beans when tomcat is started.
 */
jandex {
    includeInJar true
}

/**
 * This dependency version is equal to the one located in the 'lib/runtime' dir
 */
dependencies {
    jandex 'org.jboss:jandex:2.0.5.Final'

}

final String CURRENT_VERSION = "23.3.1"
final String NEXT_RELEASE = "23.4.0"
final String NEXT_HOTFIX = "23.3.2"

final String DEV_URL = "https://repo.futit.cloud/repository/maven-snapshots/"
final String PROD_URL = uri("https://maven.pkg.github.com/etendosoftware/etendo_core/")
group = 'com.etendoerp.platform'
def versionTs = 0;
if (file('version.properties').exists()) {
    def props = new Properties()
    props.load(new FileInputStream(file('version.properties')))
    if (props != null && props.containsKey('version.ts') && props.containsKey('version.ts')) {
        versionTs = props['version.ts']
    }
}

static def getVersionSuffix( versionTs ) {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    if ("main" != branch && !branch.contains("release")) {
        return '.' + versionTs + "-SNAPSHOT"
    }
    return ""
}

version = CURRENT_VERSION + getVersionSuffix( versionTs )

def artifactID = 'etendo-core'
def javaPackage = group + '.' + artifactID

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

jar{
    archiveBaseName.set("${javaPackage}")
    zip64 = true
}

jmh {
    zip64 = true
}
// hack so that the jmhJar task configures the zip64 property
project.tasks.findByName("jmhJar").configure {
    it.zip64 = true
    it.manifest {
        // make lo4j2 work in the generated jar
        attributes 'Multi-Release': 'true'
    }
}

sourceSets {
    jmh {
        java {
            srcDirs 'src-jmh'
        }
        resources {
            srcDirs 'src-jmh/resources'
        }
    }
}

def whiteSyncCoreList = [
        'legal/**',
        'lib/**',
        'modules_core/**',
        'referencedata/**',
        'src/**',
        'src-db/**',
        'src-test/**',
        'src-core/**',
        'src-jmh/**',
        'src-trl/**',
        'src-util/**',
        'src-wad/**',
        'web/**',
        '*.template',
        'config/*.template',
        'gradlew',
        'gradle.bat',
        'build.xml'
]
dependencies {
    jmh group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.28'
    jmh 'org.jboss.weld.se:weld-se-core:3.1.8.Final'
    jmhAnnotationProcessor('org.openjdk.jmh:jmh-generator-annprocess:1.28')
    annotationProcessor('org.openjdk.jmh:jmh-generator-annprocess:1.28')
}

publishing {
    publications {
        core(MavenPublication) {
            artifactId = artifactID
            groupId = group
            version = project.version
        }
    }

    repositories {
        maven {
            url ''
        }
    }
}

task exportProjectVersion doLast {
    ant.propertyfile(file: "version.properties") {
        entry(key: "version.tag", value: project.version)
    }
}

task upgradeCoreVersion {
    final String RELEASE = 'release'
    final String HOTFIX = 'hotfix'
    doLast {
        def versionType = project.hasProperty('type') ? project.getProperty('type') : RELEASE
        def nextVersion
        def nextRelease = NEXT_RELEASE
        def nextHotfix = NEXT_HOTFIX

        if (versionType == RELEASE) {
            nextVersion = NEXT_RELEASE
        } else if (versionType == HOTFIX) {
            nextVersion = NEXT_HOTFIX
        } else {
            throw new GradleException("The parameter value '${versionType}' is not valid, the options should be 'release' or 'hotfix'")
        }

        def version = nextVersion.split("\\.")
        if (version.length != 3) {
            throw new GradleException("The version must be in the format major.minor.patch")
        }
        def files = ['src-db/database/sourcedata/AD_MODULE.xml', 'modules_core/org.openbravo.v3/src-db/database/sourcedata/AD_MODULE.xml']

        //Update versions in AD_MODULE.xml files
        for (filePath in files) {
            def adModuleContent = file(filePath).text
            if (!adModuleContent.contains("<VERSION><![CDATA[") && !adModuleContent.contains("<VERSION_LABEL><![CDATA[") && !adModuleContent.contains("<UPDATEINFO><![CDATA[")) {
                throw new GradleException(" The format of the ${filePath} file was changed, and it will not be possible to update the versions automatically")
            }
            adModuleContent = adModuleContent.replaceAll(/<VERSION><!\[CDATA\[\d+.\d+.\d+/, "<VERSION><![CDATA[${version[0]}.${version[1]}.${version[2]}")
            adModuleContent = adModuleContent.replaceAll(/<VERSION_LABEL><!\[CDATA\[\d+Q\d+.\d+/, "<VERSION_LABEL><![CDATA[${version[0]}Q${version[1]}.${version[2]}")
            adModuleContent = adModuleContent.replaceAll(/<UPDATEINFO><!\[CDATA\[https:\/\/docs.etendo.software\/whats-new\/release-notes\/etendo-classic\/versions\/\d+Q\d+-\d+/, "<UPDATEINFO><![CDATA[https://docs.etendo.software/whats-new/release-notes/etendo-classic/versions/${version[0]}Q${version[1]}-${version[2]}")
            file(filePath).write(adModuleContent)
        }

        // Recalculate the constants CURRENT_VERSION, NEXT_RELEASE and NEXT_HOTFIX
        if (versionType == RELEASE) {
            nextHotfix = "${version[0]}.${version[1]}.1"
            if (version[1] == 4) {
                version[0]++
                version[1] = 1
            } else {
                version[1]++
            }
            nextRelease = "${version[0]}.${version[1]}.0"
        } else if (versionType == HOTFIX) {
            version[2]++
            nextHotfix = "${version[0]}.${version[1]}.${version[2]}"
        }

        //Rewrite build.gradle file with new values
        def buildGradleContent = file("build.gradle").text
        buildGradleContent = buildGradleContent.replace("CURRENT_VERSION = \"${CURRENT_VERSION}\"", "CURRENT_VERSION = \"${nextVersion}\"")
        buildGradleContent = buildGradleContent.replace("NEXT_RELEASE = \"${NEXT_RELEASE}\"", "NEXT_RELEASE = \"${nextRelease}\"")
        buildGradleContent = buildGradleContent.replace("NEXT_HOTFIX = \"${NEXT_HOTFIX}\"", "NEXT_HOTFIX = \"${nextHotfix}\"")
        file('build.gradle').write(buildGradleContent)
    }
}


/**
 * This task makes zip file, and configure publication parameters.
 */
task assembleArtifact(type: Zip) {
    System.setProperty("org.gradle.internal.publish.checksums.insecure", "true")
    archiveName artifactID + "-" + project.version + '.zip'
    destinationDir file("$buildDir/libs/")
    include(whiteSyncCoreList)
    from "."
    into "."
}

task configPublishZIP(){
    doLast {
        def publishTask = tasks.findByName("publishCorePublicationToMavenRepository") as AbstractPublishToMaven
        publishTask.publication.artifact( file("$buildDir/libs/" + "$artifactID" + "-" + "$version"+ ".zip"))
        publishTask.publication.version(project.version +'-ZIP')
        if(project.version.endsWith('-SNAPSHOT')) {
            publishing.repositories.maven.url = DEV_URL
            publishing.repositories.maven.credentials {
                username = "$nexusUser"
                password = "$nexusPassword"
            }
        }
        else {
            publishing.repositories.maven.url = PROD_URL
            publishing.repositories.maven.credentials {
                username = "$githubUser"
                password = "$githubToken"
            }
        }
    }
}

Node generateCoreDependenciesNode() {
    List<String> dependenciesCompilation = project.findProperty("dependenciesListCOMPILATION") as List<String>
    List<String> dependenciesTest = project.findProperty("dependenciesListTEST") as List<String>

    def dependenciesNode = new Node(null, "dependencies")

    if (dependenciesCompilation) {
        loadCoreDependenciesNode(dependenciesCompilation, dependenciesNode)
    }

    if (dependenciesTest) {
        loadCoreDependenciesNode(dependenciesTest, dependenciesNode, "test")
    }

    return dependenciesNode
}

static void loadCoreDependenciesNode(List<String> dependencies, Node dependenciesNode, String scope = null) {
    for (String dependency : dependencies) {
        def splitId = dependency.split(":")

        def dependencyNode = dependenciesNode.appendNode("dependency")
        dependencyNode.appendNode("groupId", splitId[0])
        dependencyNode.appendNode("artifactId", splitId[1])
        dependencyNode.appendNode("version", splitId[2])

        if (scope) {
            dependencyNode.appendNode("scope", scope)
        }

        // Exclude transitive dependencies
        dependencyNode.append(generateExclusionNode())
    }
}

static Node generateExclusionNode() {
    def exclusionsNode = new Node(null, "exclusions")
    def exclusionNode = exclusionsNode.appendNode("exclusion")

    exclusionNode.appendNode("groupId", "*")
    exclusionNode.appendNode("artifactId", "*")

    return exclusionsNode
}


task configPublishJAR(){
    dependsOn(assembleArtifact)
    doLast {
        def publishTask = tasks.findByName("publishCorePublicationToMavenRepository") as AbstractPublishToMaven
        publishTask.publication.artifact(file("$buildDir/libs/$artifactID-$version"+".zip"))
        publishTask.publication.artifact jar
        publishTask.publication.artifact sourcesJar

        // Generate the dependencies node.
        List<String> dependenciesCompilation = project.findProperty("dependenciesListCOMPILATION") as List<String>
        List<String> dependenciesTest = project.findProperty("dependenciesListTEST") as List<String>
        if (dependenciesCompilation || dependenciesTest) {
            Node dependenciesNode = generateCoreDependenciesNode()
            publishTask.publication.pom.withXml {
                it.asNode().append(dependenciesNode)
            }
        }

        if(project.version.endsWith('-SNAPSHOT')) {
            publishing.repositories.maven.url = DEV_URL
            publishing.repositories.maven.credentials {
                username = "$nexusUser"
                password = "$nexusPassword"
            }
        }
        else {
            publishing.repositories.maven.url = PROD_URL
            publishing.repositories.maven.credentials {
                username = "$githubUser"
                password = "$githubToken"
            }
        }
    }
}

task publishCoreJar(dependsOn: [sourcesJar, jar, configPublishJAR, publishCorePublicationToMavenRepository]) {
    mustRunAfter sourcesJar, jar
}

//Deprecated
task publishCoreZip(dependsOn: [assembleArtifact,configPublishZIP, publishCorePublicationToMavenRepository]) { }

idea {
    module {
        excludeDirs += [file('${env.CATALINA_HOME}'), file('.githooks'), file('.idea'), file('.settings'), file('.build.apply')]
    }
}

task call_sass(type: Exec) {}

task deploySkin (dependsOn: ["cssCompile", "deploy.skin"]) doLast {

}

task djmh(type: JavaExec, dependsOn: jmhCompileGeneratedClasses) {
    main = project.hasProperty("benchmark") ? project.getProperty("benchmark") : null
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

