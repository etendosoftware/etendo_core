configurations {
    antClasspath
}

test {
    useJUnitPlatform()
    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', true
    maxParallelForks 1
    forkEvery 100
    maxHeapSize= '2G'
}

dependencies {
    testImplementation 'org.codehaus.groovy:groovy-all:2.5.14'
    testImplementation platform("org.spockframework:spock-bom:2.0-M4-groovy-2.5")
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.spockframework:spock-junit4'
    testImplementation 'junit:junit:4.13.1'
    testImplementation( "com.athaydes:spock-reports:2.0-groovy-2.5" ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    testImplementation fileTree(project.projectDir) {
        include "lib/test/*.jar"
    }
    antClasspath('org.apache.ant:ant-junit:1.9.2') { transitive = false }
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'

}
ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
        classpath: configurations.antClasspath.asPath)

sourceSets{
    test {
        java {
            srcDirs 'src-test/src'
            outputDir = file("src-test/build/classes")
        }
        resources {
            srcDirs 'src-test/resources'
        }
        groovy {
            srcDirs "src-test/test/groovy"
        }
    }
}

if(file('modules').exists() && file('modules').isDirectory()){
    file('modules').eachDir {
        sourceSets.test.java.srcDirs += it.toString()+"/src-test/src"
        sourceSets.test.java.outputDir = file("src-test/build/classes")
        sourceSets.test.groovy.srcDirs += it.toString()+"/src-test/test/groovy"
        sourceSets.test.groovy.outputDir = file("src-test/build/classes")
    }
}
if(file('modules_core').exists() && file('modules_core').isDirectory()){
    file('modules_core').eachDir {
        sourceSets.test.java.srcDirs += it.toString()+"/src-test"
        sourceSets.test.java.outputDir = file("src-test/build/classes")
    }
}

test.dependsOn('ant.compile.test')

task depsTest {
    doLast {
        configurations.compileClasspath.getFiles().each { file ->
            dependencies.testImplementation files(file)
        }
    }
}
